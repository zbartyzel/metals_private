[
  {
    "id" : "0451d3af-e6ac-42f3-908b-6d1f2f10a8f9",
    "prId" : 1966,
    "comments" : [
      {
        "id" : "8c9b4bab-1d7c-4fe9-a716-e3ca50eb832f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I don't think you can properly get symbol from stacktrace and the logic will always be flaky. Jumping to the line is enough. For example:\r\n```\r\nException in thread \"main\" java.lang.Exception\r\n\tat Main$.$anonfun$main$1(Main.scala:13)\r\n\tat Main$.$anonfun$main$1$adapted(Main.scala:10)\r\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\r\n\tat Main$.main(Main.scala:10)\r\n\tat Main.main(Main.scala)\r\n```\r\n\r\nIt's not possible to map the full symbol `Main$.$anonfun$main$1` to anything similar in sematicDB. We can only map a part of it, which will make the logic flaky. I would drop going to definition.",
        "createdAt" : "2020-08-14T16:33:47Z",
        "updatedAt" : "2020-08-20T09:03:33Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "68a1fe44-7fe7-4d61-9366-3e4cdff6a2cb",
        "parentId" : "8c9b4bab-1d7c-4fe9-a716-e3ca50eb832f",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Although we could do `toplevelFromLine` and just get the toplevel via:\r\n```scala\r\nprivate def getSymbolFromLine(line: String): String = {\r\n  val toplevel = line.substring(line.indexOf(\"at \") + 3, line.indexOf(\".\"))\r\n  val descriptor = if(toplevel.endsWith(\"$\")) List(Descriptor.Term) else List(Descriptor.Type)\r\n  BuildTargetClasses.symbolFromClassName(toplevel.stripSuffix(\"$\"), descriptor)\r\n}\r\n```\r\n\r\nWe might need to move the method from BuildTargetClasses if it makes sense. It's in the class, so some modification will be needed.",
        "createdAt" : "2020-08-17T17:39:11Z",
        "updatedAt" : "2020-08-20T09:03:33Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0c3860c9-ae02-4d84-b3c9-566f1700da76",
        "parentId" : "8c9b4bab-1d7c-4fe9-a716-e3ca50eb832f",
        "author" : {
          "login" : "kpbochenek",
          "name" : "Krzysiek Bochenek",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "okay dropping",
        "createdAt" : "2020-08-17T17:58:31Z",
        "updatedAt" : "2020-08-20T09:03:33Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : "Krzysiek Bochenek",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f7e1db4a0dcdfe6522e0116b20085a2f3f04584",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +136,140 @@\n  private def symbolFromLine(line: String): String = {\n    line.substring(line.indexOf(\"at \") + 3, line.indexOf(\"(\"))\n  }\n"
  }
]