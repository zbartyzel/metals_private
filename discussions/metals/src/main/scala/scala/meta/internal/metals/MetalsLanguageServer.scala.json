[
  {
    "id" : "b8778168-2bd6-40f7-9a21-1437cc6dd4f0",
    "prId" : 2735,
    "prUrl" : "https://github.com/scalameta/metals/pull/2735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e775132-44c8-4f3d-8e9d-b978046dc20a",
        "parentId" : null,
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : "Only suggestion is _maybe_ to log something out here if we actually hit this. Since like you said an `Object` is actually valid as a notification. Actually even more then that if this is `nil` by chance for some reason from the client it might be nice to have something in here like:\r\n```suggestion\r\n      scribe.warn(s\"Unexpected notification params received for didFocusTextDocument: $parms\")\r\n      None\r\n```\r\nwdyt?",
        "createdAt" : "2021-04-22T18:28:04Z",
        "updatedAt" : "2021-04-22T18:36:02Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      },
      {
        "id" : "1ba68684-4bae-4f8f-863b-dd5b7378e18b",
        "parentId" : "9e775132-44c8-4f3d-8e9d-b978046dc20a",
        "authorId" : "1123d20b-c024-4d9e-9f44-70ccf9a2d237",
        "body" : "Added!",
        "createdAt" : "2021-04-22T18:36:19Z",
        "updatedAt" : "2021-04-22T18:36:19Z",
        "lastEditedBy" : "1123d20b-c024-4d9e-9f44-70ccf9a2d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fa23357d24f398577121eacfc920690e5bd50d1",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1002,1006 @@          s\"Unexpected notification params received for didFocusTextDocument: $params\"\n        )\n        None\n    }\n"
  },
  {
    "id" : "f3bdbaf5-624e-4ff1-918d-19243cf22a62",
    "prId" : 2668,
    "prUrl" : "https://github.com/scalameta/metals/pull/2668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68130380-374e-4081-9959-bec237efae6f",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Why move it outside `if !isVisited.contains(sourceUri)` ?\r\n",
        "createdAt" : "2021-04-22T10:59:00Z",
        "updatedAt" : "2021-04-23T16:07:37Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      },
      {
        "id" : "7e5c1193-5e76-4803-9766-3e54a91a5227",
        "parentId" : "68130380-374e-4081-9959-bec237efae6f",
        "authorId" : "06570d45-e6f3-4137-96ae-d24d856bd275",
        "body" : "It was needed to correctly call `buildTargets.addDependencySource(path, item.getTarget)`.\r\nOtherwise, it registers jar only once for the first build target where it appeared.",
        "createdAt" : "2021-04-23T13:41:34Z",
        "updatedAt" : "2021-04-23T16:07:37Z",
        "lastEditedBy" : "06570d45-e6f3-4137-96ae-d24d856bd275",
        "tags" : [
        ]
      },
      {
        "id" : "5cf7a78c-8311-4290-9ec6-54a25e825f82",
        "parentId" : "68130380-374e-4081-9959-bec237efae6f",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Ach alright. This should be fine.",
        "createdAt" : "2021-04-23T13:57:41Z",
        "updatedAt" : "2021-04-23T16:07:37Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3fcc251f9126b13a9372df15273d675aff8f745",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +2334,2338 @@      sourceUri <- Option(item.getSources).toList.flatMap(_.asScala)\n      path = sourceUri.toAbsolutePath\n      _ = buildTargets.addDependencySource(path, item.getTarget)\n      _ = jdkSources.foreach(source =>\n        buildTargets.addDependencySource(source, item.getTarget)"
  },
  {
    "id" : "28176bb8-00e0-46ef-9616-cf802de1d9f4",
    "prId" : 2481,
    "prUrl" : "https://github.com/scalameta/metals/pull/2481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81b6f4ca-72cc-4806-8e92-c9a8a32e4d5a",
        "parentId" : null,
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : "I hesitated to completely redo this, but wanted to instead just focus on the task at hand. However, I think we can actually improve this here. Mainly, in the first part we are actually disconnecting and then re-connecting. Then we are running the full build import, and then initiating the tree view. However, if at any point during that process something goes wrong, we `disconnectOldBuildServer()` when that's probably not necessary at all depending on the situation. It may be preferable to instead break those three things out from one another and handle a failure in differently. An argument could be made that if something goes wonky during the build import that _maybe_ could be fixed easily, do we really want to disconnect fully? There may be partial support still very much available. Just something to think about.",
        "createdAt" : "2021-02-06T13:34:01Z",
        "updatedAt" : "2021-02-08T10:39:29Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      },
      {
        "id" : "3527e423-a402-4f92-82a8-9566c62b432f",
        "parentId" : "81b6f4ca-72cc-4806-8e92-c9a8a32e4d5a",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "We should not fail on tree view for sure, we used to fail on compile too, but I moved it out because of that. It's fine to do it here, but also can be a separate PR.",
        "createdAt" : "2021-02-08T10:17:13Z",
        "updatedAt" : "2021-02-08T10:39:29Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6ba74f9a1216266d6c0b6c4a6da349745770f6d",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +1972,1976 @@        BuildChange.Failed\n      }\n      .flatMap(compileAllOpenFiles)\n  }\n"
  },
  {
    "id" : "3ee64cd0-98c6-4566-aaf1-af5459b8e227",
    "prId" : 2402,
    "prUrl" : "https://github.com/scalameta/metals/pull/2402",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eed69224-f32d-4b17-a72b-539c780ff5ac",
        "parentId" : null,
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "do all clients set this? This is potentially breaking for clients that used to rely on the flag and are not yet sending this info via LSP",
        "createdAt" : "2021-01-18T13:13:40Z",
        "updatedAt" : "2021-01-18T13:13:42Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      },
      {
        "id" : "942ac7e2-da77-453f-9360-df412c499028",
        "parentId" : "eed69224-f32d-4b17-a72b-539c780ff5ac",
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "Sorry, just saw the comment in the PR description. It's cool then!\r\n\r\nDo we still need `metalsClientType` in the config or can we remove it?",
        "createdAt" : "2021-01-18T13:14:27Z",
        "updatedAt" : "2021-01-18T13:14:28Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      },
      {
        "id" : "8bb6311f-baf9-403e-bf5f-5e3baa5e3bb9",
        "parentId" : "eed69224-f32d-4b17-a72b-539c780ff5ac",
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "At a quick glance, it seems like this is the only spot where we used `metalsClientType` directly. Other than that it's used to initialize the default config in https://github.com/scalameta/metals/blob/a004fd0a7c0153415243f735a54070abe178924e/metals/src/main/scala/scala/meta/internal/metals/MetalsServerConfig.scala#L134 so it would be better to align the source of truth and use LSP for that too, wdyt?",
        "createdAt" : "2021-01-18T13:17:28Z",
        "updatedAt" : "2021-01-18T13:17:28Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      },
      {
        "id" : "b56260a6-7592-4f3d-8bb5-2d3eb2ca284e",
        "parentId" : "eed69224-f32d-4b17-a72b-539c780ff5ac",
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : "As far as I can tell, yes. A few examples of the lesser popular clients\r\n- [emacs-lsp](https://github.com/emacs-lsp/lsp-mode/blob/a0c41e489c656bc69a3cdd0d04ee549f45e42a59/lsp-mode.el#L6656)\r\n- [Neovim](https://github.com/neovim/neovim/commit/1a4d380b5abfff2cf5e46a1b00e98f4381b7e5b0)\r\n\r\nAnd of course the big dogs like VS Code for sure set this.\r\n\r\n> potentially breaking \r\n\r\nAlso, this is only being used to show the client in the logs, everything else regarind the `-Dmetals.client` stuff is still the same and will still work as expected, it just won't show the client name in the logs.\r\n\r\nThe one that I did find that doesn't set this is `vim-lsc`. However, I'll send in a pr to fix this for them  since this has been part of the spec for a while now.",
        "createdAt" : "2021-01-18T13:18:56Z",
        "updatedAt" : "2021-01-18T13:18:56Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      },
      {
        "id" : "cef006ca-031c-4425-9e19-f04dc683aeb2",
        "parentId" : "eed69224-f32d-4b17-a72b-539c780ff5ac",
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : "https://github.com/natebosch/vim-lsc/pull/373",
        "createdAt" : "2021-01-18T13:25:04Z",
        "updatedAt" : "2021-01-18T13:25:04Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      },
      {
        "id" : "aa13022c-2c05-40d3-a9d4-58909132fcf2",
        "parentId" : "eed69224-f32d-4b17-a72b-539c780ff5ac",
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : ">  so it would be better to align the source of truth and use LSP for that too, wdyt?\r\n\r\nSorry I was answering your other questions, and totally missed this one. I think in theory, yea, it'd be awesome to just fully get away from the `MetalsServerConfig` altogether, but I'm honest just not sure when. We could do a check on `clientInfo.name` and try to somewhat match on that, but that also may be a bit eh. I'm sort of in the mindset for now to still just leave this in here for a bit since it's not really harming anything. Especially since all the values are looked at last in here: https://github.com/scalameta/metals/blob/main/metals/src/main/scala/scala/meta/internal/metals/ClientConfiguration.scala",
        "createdAt" : "2021-01-18T13:36:18Z",
        "updatedAt" : "2021-01-18T13:36:18Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      }
    ],
    "commit" : "beda22ff572487e3bb0d5c8b0b6a60df46f9e2f1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +289,293 @@        MetalsLogger.setupLspLogger(workspace, redirectSystemOut)\n\n        val clientInfo = Option(params.getClientInfo()) match {\n          case Some(info) =>\n            s\"for client ${info.getName()} ${Option(info.getVersion).getOrElse(\"\")}\""
  },
  {
    "id" : "fc03e49e-e266-4418-b295-290c605ec62c",
    "prId" : 2391,
    "prUrl" : "https://github.com/scalameta/metals/pull/2391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fbda519-6937-423a-a8d6-a413bc4f804a",
        "parentId" : null,
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : "This pr looks huge because of the shift, but really this is the only difference. If there is no root, we just show the message, and then don't replace the providers. ",
        "createdAt" : "2021-01-15T10:48:33Z",
        "updatedAt" : "2021-01-15T10:48:33Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      },
      {
        "id" : "dc08339e-edc2-4270-87c8-ec8edc3b521d",
        "parentId" : "9fbda519-6937-423a-a8d6-a413bc4f804a",
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "![image](https://user-images.githubusercontent.com/691940/104718269-e9577d00-572a-11eb-95a6-f7de81aece6e.png)\r\n\r\nThis helps a lot with the review",
        "createdAt" : "2021-01-15T11:12:29Z",
        "updatedAt" : "2021-01-15T11:12:32Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      },
      {
        "id" : "d30f682c-1e6d-45f8-97b6-5acb90faed2c",
        "parentId" : "9fbda519-6937-423a-a8d6-a413bc4f804a",
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : "ahhhh TIL! I've never used this before!",
        "createdAt" : "2021-01-15T11:14:21Z",
        "updatedAt" : "2021-01-15T11:14:21Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      }
    ],
    "commit" : "128d18c143146159f289e0402ad515753e17f3d5",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +284,288 @@    root match {\n      case None =>\n        languageClient.showMessage(Messages.noRoot)\n      case Some(path) =>\n        workspace = AbsolutePath(Paths.get(URI.create(path))).dealias"
  },
  {
    "id" : "95dda311-0ce0-4248-a6f9-0f7dedb82e78",
    "prId" : 2374,
    "prUrl" : "https://github.com/scalameta/metals/pull/2374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e69ecbf4-1aa5-455b-8479-f02f78558fd4",
        "parentId" : null,
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : "So I honestly don't know, that's why I'm asking, but will there be a penalty paid at all if a user closes a file, and then re-opens it? In that case, we removed the tree from `trees` in `Trees.scala`. It's probably not a huge deal, but am more just curious if it's necessary.",
        "createdAt" : "2021-01-14T11:32:14Z",
        "updatedAt" : "2021-01-22T16:41:19Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      },
      {
        "id" : "059e4075-a2e8-40d1-9f98-743116bdd235",
        "parentId" : "e69ecbf4-1aa5-455b-8479-f02f78558fd4",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "the penalty should rather be small, parsing is fast, so this is just needed to keep memory issues in check.",
        "createdAt" : "2021-01-14T16:16:23Z",
        "updatedAt" : "2021-01-22T16:41:19Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3bdee6d5b72cf6cfee580941ef1b1c2987b172b",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +1040,1044 @@    buffers.remove(path)\n    compilers.didClose(path)\n    trees.didClose(path)\n    diagnostics.onNoSyntaxError(path)\n  }"
  },
  {
    "id" : "e2898d51-aec6-4c90-a9ce-00a83d024651",
    "prId" : 2154,
    "prUrl" : "https://github.com/scalameta/metals/pull/2154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eedb30be-77fd-41a9-a866-2d79719a5bfe",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Could we move the logic to a separate method?",
        "createdAt" : "2020-10-28T17:35:18Z",
        "updatedAt" : "2020-10-30T17:54:40Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      },
      {
        "id" : "46182412-d100-466e-b1c9-182e0f9846f0",
        "parentId" : "eedb30be-77fd-41a9-a866-2d79719a5bfe",
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : "Yea for sure, I moved this out now.",
        "createdAt" : "2020-10-29T13:44:27Z",
        "updatedAt" : "2020-10-30T17:54:40Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      }
    ],
    "commit" : "8eab66607688c713397334de6750fab0ca346fc8",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +1409,1413 @@        }.asJavaObject\n      case ServerCommands.RestartBuildServer() =>\n        bspSession.foreach { session =>\n          if (session.main.isBloop) bloopServers.shutdownServer()\n        }"
  },
  {
    "id" : "8b189e9f-f166-4d54-8907-b5e59f50c269",
    "prId" : 1897,
    "prUrl" : "https://github.com/scalameta/metals/pull/1897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1fc4ec7-0e24-4395-8423-e01c724a09b2",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Maybe include it in the Doctor?  I feel like it's part of the Doctor's functionality. ",
        "createdAt" : "2020-07-08T14:42:36Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      },
      {
        "id" : "05a2f46f-23e2-4bb0-9d40-4f94c6432c77",
        "parentId" : "b1fc4ec7-0e24-4395-8423-e01c724a09b2",
        "authorId" : "833cf3ad-ab55-41fb-9fdf-94433786b212",
        "body" : "I always prefer smaller, single responsibility classes but I have no strong preference here, if you want I can move this logic to Doctor :+1:",
        "createdAt" : "2020-07-09T07:42:53Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : "833cf3ad-ab55-41fb-9fdf-94433786b212",
        "tags" : [
        ]
      },
      {
        "id" : "cc7218f2-e457-4ac3-b701-97eff3b18c49",
        "parentId" : "b1fc4ec7-0e24-4395-8423-e01c724a09b2",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "It's fine, but at some point we need a proper solution for setting up all the classes better.",
        "createdAt" : "2020-07-09T11:58:31Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +504,508 @@      clientConfig\n    )\n    popupChoiceReset = new PopupChoiceReset(\n      tables,\n      languageClient,"
  },
  {
    "id" : "caff0847-0636-478b-9c7b-510457c846d4",
    "prId" : 1846,
    "prUrl" : "https://github.com/scalameta/metals/pull/1846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db6afdc7-37b9-4d59-b265-79cf4c16df22",
        "parentId" : null,
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : "Was this an issue before? Would this only be an issue if for example the source was removed and then we were looking at stale information, or when would this actually happen?",
        "createdAt" : "2020-06-19T19:57:13Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      },
      {
        "id" : "66663647-fcfb-4a1c-af40-ea7e1bd335ff",
        "parentId" : "db6afdc7-37b9-4d59-b265-79cf4c16df22",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "This is actually only an issue if ammonite failed to generate the scala files, which also means we should watch the `.ammonite` directory, since they can be created after indexing :thinking: ",
        "createdAt" : "2020-06-19T22:24:34Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      },
      {
        "id" : "e1bcd0f1-f176-4dba-9ff1-0f394993f43f",
        "parentId" : "db6afdc7-37b9-4d59-b265-79cf4c16df22",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Actually, it didn't fail to generate, ammonite just differently generates path if `^` is used, which should not normally be an issue, but we should leave the guard just in case: I will change the tests a bit so that it's more natural path and not `^.backToTheSameDirectory`",
        "createdAt" : "2020-06-20T20:06:42Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "10223975ce00488d39a58765d57e434b217aeb21",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1688,1692 @@    try {\n      val sourceToIndex0 = sourceToIndex(source, targetOpt)\n      if (sourceToIndex0.exists) {\n        val reluri = source.toIdeallyRelativeURI(sourceItem)\n        val input = sourceToIndex0.toInput"
  },
  {
    "id" : "aa46d6a0-67e0-4e0e-aa60-15a1c3d5cbb2",
    "prId" : 1803,
    "prUrl" : "https://github.com/scalameta/metals/pull/1803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3aded97c-3ea4-49e3-add8-fbb34aa57071",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "This might also be useful to log anyway just in case. There will be a fix in ammonite to not remove those directories, which will help in the long run.",
        "createdAt" : "2020-06-04T12:22:32Z",
        "updatedAt" : "2020-06-04T12:22:32Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a821715e949ca87e48cc5b41fe70815789eae405",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1821,1825 @@        // where it can rarely deletes directories while we are trying to watch them\n        case NonFatal(e) =>\n          scribe.warn(\"File watching failed, indexes will not be updated.\", e)\n      }\n    }"
  },
  {
    "id" : "f3c2f722-4967-4c43-9a79-4954120f5f11",
    "prId" : 1784,
    "prUrl" : "https://github.com/scalameta/metals/pull/1784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "222a5471-0fd3-463d-87ac-d699e023cbe8",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "This is needed so that we are able to be able to figure out what the original source roots were and and find their path relative to workspace root",
        "createdAt" : "2020-05-29T16:32:09Z",
        "updatedAt" : "2020-05-29T17:13:56Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "96739e67fcaac88a3d90e0225eec023b4b4e8293",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1802,1806 @@        source <- item.getSources.asScala\n      } {\n        val sourceItemPath = source.getUri.toAbsolutePath(followSymlink = false)\n        buildTargets.addSourceItem(sourceItemPath, item.getTarget)\n      }"
  },
  {
    "id" : "74e4d4d0-71d0-4853-8346-ba21f9dbc651",
    "prId" : 1758,
    "prUrl" : "https://github.com/scalameta/metals/pull/1758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f435be96-2968-4dc4-88f9-9c631858cfaf",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Maybe we should filter the ones with incompatible versions and show a warning for those?",
        "createdAt" : "2020-05-18T10:40:39Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      },
      {
        "id" : "c7e2b422-9045-43f7-9e71-ff4175d76e7c",
        "parentId" : "f435be96-2968-4dc4-88f9-9c631858cfaf",
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : "So one thing I thought about while doing this is in a situation where a user has an sbt and a mill file for example, I think it's important for the choice to take priority. Because let's say they are on an unsupported sbt version, but they want sbt, then it's probably better for them to choose sbt and then get a warning and \"no build tool\" message rather than have sbt filtered out, and mill chosen even if that's not what they want.\r\n\r\nWhat do you think?",
        "createdAt" : "2020-05-18T11:57:29Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      },
      {
        "id" : "efd23118-2840-429b-8323-a70628a59499",
        "parentId" : "f435be96-2968-4dc4-88f9-9c631858cfaf",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Sure, that's probably better.",
        "createdAt" : "2020-05-18T13:35:51Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "82833ad1c0108993cd84f5b3b8aba65d1107aace",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1462,1466 @@    }\n\n    buildTools.loadSupported match {\n      case Nil => {\n        if (!buildTools.isAutoConnectable) {"
  },
  {
    "id" : "3710447a-3812-43d1-b18f-094bf8e00f50",
    "prId" : 1717,
    "prUrl" : "https://github.com/scalameta/metals/pull/1717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e60b6d20-8187-41ac-90aa-386ea9b889dd",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "So probably the best that we can do currently is add an option to MetalsServerConfig like:\r\n```scala\r\n  allowMultilineStringFormatting = MetalsServerConfig.binaryOption(\r\n      \"metals.allow-multiline-string-formatting\",\r\n      default = true\r\n    ),\r\n```\r\nAnd then:\r\n```scala      \r\n\r\ncapabilities.setDocumentRangeFormattingProvider(initialConfig.allowMultilineStringFormatting)\r\n```",
        "createdAt" : "2020-05-08T17:32:59Z",
        "updatedAt" : "2020-05-12T14:12:17Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2e25e3cd0a9f38ceefc59fbff6f94d7e31be601",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +542,546 @@        new DocumentOnTypeFormattingOptions(\"\\n\")\n      )\n      capabilities.setDocumentRangeFormattingProvider(\n        initialConfig.allowMultilineStringFormatting\n      )"
  },
  {
    "id" : "0d62a032-b426-46f0-b059-56b781ca1c59",
    "prId" : 1538,
    "prUrl" : "https://github.com/scalameta/metals/pull/1538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32305d1d-cac4-42d6-9cbf-25231bac4a95",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Maybe we could have this:\r\n```scala\r\n    val toIndexSource = targetOpt\r\n      .flatMap(ammonite.generatedScalaPath(_, source))\r\n      .getOrElse(source)\r\n```\r\nin a separate function and just use here to get the real source item?",
        "createdAt" : "2020-03-31T17:41:32Z",
        "updatedAt" : "2020-05-21T11:17:43Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      },
      {
        "id" : "ab1ae8e4-3b56-418b-8251-c81b7fd9f2f4",
        "parentId" : "32305d1d-cac4-42d6-9cbf-25231bac4a95",
        "authorId" : "343802b0-b5d4-488b-944f-b7fca9ffb64f",
        "body" : "Done.",
        "createdAt" : "2020-04-05T22:17:53Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : "343802b0-b5d4-488b-944f-b7fca9ffb64f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +1622,1626 @@        buildTargets.linkSourceFile(target, source)\n      }\n      indexSourceFile(source, Some(sourceItem), targets.asScala.headOption)\n    }\n  }"
  },
  {
    "id" : "fb99d1f1-5815-413a-b894-f81116032334",
    "prId" : 1538,
    "prUrl" : "https://github.com/scalameta/metals/pull/1538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "341ff3e9-6303-4edb-ac03-d5e673eae1e6",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Could we reindex only the Ammonite targets when needed? ",
        "createdAt" : "2020-04-09T11:00:44Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      },
      {
        "id" : "c942690e-0fd7-4c2b-b4eb-24af4630308c",
        "parentId" : "341ff3e9-6303-4edb-ac03-d5e673eae1e6",
        "authorId" : "343802b0-b5d4-488b-944f-b7fca9ffb64f",
        "body" : "I don't know… It seems that would require being able to remove particular build targets from the indices (only the Ammonite ones that changed when (re)importing Ammonite scripts, or only the main build ones when (re)importing the main build), before adding them back with updated parameters. I don't know if that's do-able.",
        "createdAt" : "2020-04-11T14:06:47Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : "343802b0-b5d4-488b-944f-b7fca9ffb64f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : 284,
    "diffHunk" : "@@ -1,1 +1766,1770 @@  }\n\n  private var lastImportedBuild = ImportedBuild.empty\n\n  private def indexWorkspace(check: () => Unit): Unit = {"
  },
  {
    "id" : "2e9b22a1-8f4d-4902-922b-cc29327eb669",
    "prId" : 1491,
    "prUrl" : "https://github.com/scalameta/metals/pull/1491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "941f3a7b-0db7-4f91-87e6-a489ff6274a2",
        "parentId" : null,
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "Will this trigger a warning if I'm running a custom version of Bloop locally? Ideally, it would be good to only trigger this when the user has explicitly configured a bloop version through the settings before (I personally don't change this setting).",
        "createdAt" : "2020-03-12T08:46:51Z",
        "updatedAt" : "2020-03-12T10:12:33Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      },
      {
        "id" : "b54bd83a-6143-4141-8fcc-fe756d7822c9",
        "parentId" : "941f3a7b-0db7-4f91-87e6-a489ff6274a2",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Fixed!",
        "createdAt" : "2020-03-12T10:22:06Z",
        "updatedAt" : "2020-03-12T10:22:06Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbbdead8d9342cae1e125b6d8574ec11521afe81",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +841,845 @@          val expectedBloopVersion = userConfig.currentBloopVersion\n          val correctVersionRunning =\n            buildServer.map(_.version).contains(expectedBloopVersion)\n          val allVersionsDefined = buildServer.nonEmpty && userConfig.bloopVersion.nonEmpty\n          val changedToNoVersion = old.bloopVersion.isDefined && userConfig.bloopVersion.isEmpty"
  },
  {
    "id" : "1256faf5-e01c-4fa9-bd0c-d09287427911",
    "prId" : 1435,
    "prUrl" : "https://github.com/scalameta/metals/pull/1435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fa47ad7-7426-4cc5-90c2-c424f508d5a9",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Since it's for the test, it's better that we wait.",
        "createdAt" : "2020-02-17T14:53:50Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb025d5358f8296b853bbb7ede33b89e75356b35",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +803,807 @@        val event =\n          new DirectoryChangeEvent(EventType.MODIFY, generatedFile.toNIO, 1)\n        didChangeWatchedFiles(event).get()\n      }\n    }"
  },
  {
    "id" : "e11c0eb5-eb66-4c25-8a76-68dd73003afb",
    "prId" : 1435,
    "prUrl" : "https://github.com/scalameta/metals/pull/1435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca438078-16d2-492e-82c5-ebcc4985e1b6",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "It's now run in a Future in order not to block the event watcher",
        "createdAt" : "2020-02-17T15:47:31Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb025d5358f8296b853bbb7ede33b89e75356b35",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +881,885 @@        onChange(List(path)).asJava\n      } else if (path.isSemanticdb) {\n        Future {\n          event.eventType() match {\n            case EventType.DELETE =>"
  },
  {
    "id" : "170d3418-fb57-42ae-8e12-bd928fcbbfce",
    "prId" : 1310,
    "prUrl" : "https://github.com/scalameta/metals/pull/1310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60e964ad-dc8f-479d-b974-ab7be8bfc13d",
        "parentId" : null,
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "This will crash with `MatchError` when the user doesn't want to reconnect.",
        "createdAt" : "2020-01-17T19:49:28Z",
        "updatedAt" : "2020-01-19T10:49:31Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      },
      {
        "id" : "9c3672b2-5ef3-4e23-860b-d196f0443cc7",
        "parentId" : "60e964ad-dc8f-479d-b974-ab7be8bfc13d",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Thanks, fixed!",
        "createdAt" : "2020-01-18T18:58:40Z",
        "updatedAt" : "2020-01-19T10:49:31Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5a0168268324dcfda820d80b1b28f7833499098",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +827,831 @@              .asScala\n              .flatMap {\n                case item if item == Messages.BloopVersionChange.reconnect =>\n                  bloopServers.shutdownServer()\n                  autoConnectToBuildServer().ignoreValue"
  },
  {
    "id" : "039977c2-03db-454e-8a0d-a3d157a40eb2",
    "prId" : 1286,
    "prUrl" : "https://github.com/scalameta/metals/pull/1286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ed0b7f0-4fae-49f0-9093-171f9e13d6b9",
        "parentId" : null,
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "I got this wrong in #1251. When the client supports code action literals we can send the `CodeActionOptions` version, otherwise we just send `true`",
        "createdAt" : "2020-01-11T17:13:21Z",
        "updatedAt" : "2020-01-11T17:13:21Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e6135a896a913f6ec9a1ae82ca098806ffdfea3",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +515,519 @@      } else {\n        capabilities.setCodeActionProvider(true)\n      }\n      capabilities.setTextDocumentSync(TextDocumentSyncKind.Full)\n      capabilities.setExperimental(MetalsExperimental())"
  },
  {
    "id" : "343f8ad5-0f1b-4a1c-8bc6-b6f5b8c12b35",
    "prId" : 1266,
    "prUrl" : "https://github.com/scalameta/metals/pull/1266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c769a139-fe55-4989-8fb7-04a832e8023c",
        "parentId" : null,
        "authorId" : "99b86a37-7b24-412b-846e-038ecface4d6",
        "body" : "could you also adapt the remaining methods on the `build` to return the scala `Future` as well?",
        "createdAt" : "2020-01-09T11:22:45Z",
        "updatedAt" : "2020-01-09T19:41:06Z",
        "lastEditedBy" : "99b86a37-7b24-412b-846e-038ecface4d6",
        "tags" : [
        ]
      },
      {
        "id" : "06ef9ed2-c60b-40c4-973a-d0c527e84ffb",
        "parentId" : "c769a139-fe55-4989-8fb7-04a832e8023c",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Adapted most except `compile`, since the CompletableFuture.cancel is being used and don't want to rework cancellation right now.",
        "createdAt" : "2020-01-09T19:25:50Z",
        "updatedAt" : "2020-01-09T19:41:06Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f92bf439ec2e556ef2dd37eb204d08963b7f24b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1432,1436 @@    val importedBuild = timed(\"imported build\") {\n      for {\n        workspaceBuildTargets <- build.workspaceBuildTargets()\n        ids = workspaceBuildTargets.getTargets.map(_.getId)\n        scalacOptions <- build"
  },
  {
    "id" : "52308a87-49c8-4444-b1d9-221ad3bd6757",
    "prId" : 1256,
    "prUrl" : "https://github.com/scalameta/metals/pull/1256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71bc69e5-5642-4995-9c04-e372a82e5cf1",
        "parentId" : null,
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "nit: should we move this into a separate file? ",
        "createdAt" : "2020-01-06T16:35:07Z",
        "updatedAt" : "2020-01-06T16:35:39Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      },
      {
        "id" : "7d0009ca-c256-4b2a-ba6d-a0785d220fe7",
        "parentId" : "71bc69e5-5642-4995-9c04-e372a82e5cf1",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "I think we should do it as a larger refactor of the file. I can see a number of similar methods that might be put there. ",
        "createdAt" : "2020-01-06T17:11:17Z",
        "updatedAt" : "2020-01-06T17:11:18Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5221982e1605895d70c5abd22174e1406e1e0efb",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1659,1663 @@  }\n\n  private def checkRunningBloopVersion(bspServerVersion: String) = {\n    if (doctor.isUnsupportedBloopVersion(bspServerVersion)) {\n      val notification = tables.dismissedNotifications.IncompatibleBloop"
  },
  {
    "id" : "d51253ef-5cf5-4b49-b2b0-1d96da8fd1e2",
    "prId" : 1250,
    "prUrl" : "https://github.com/scalameta/metals/pull/1250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de6d3541-c373-48cc-b08d-848fc88fc4c1",
        "parentId" : null,
        "authorId" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "body" : "Enable to fire `textDocument/completion` on type `*`",
        "createdAt" : "2020-01-04T12:23:15Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +495,499 @@        new CompletionOptions(\n          config.compilers.isCompletionItemResolve,\n          List(\".\", \"*\").asJava\n        )\n      )"
  },
  {
    "id" : "ca1ee070-1032-404f-b40d-d8f133318405",
    "prId" : 1174,
    "prUrl" : "https://github.com/scalameta/metals/pull/1174",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3feb82f-9414-4676-9fd0-88c5e8936fc4",
        "parentId" : null,
        "authorId" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "body" : "Clear symbolSearch cache (for dependency sources) on indexing workspace",
        "createdAt" : "2019-12-15T17:54:47Z",
        "updatedAt" : "2019-12-16T12:57:43Z",
        "lastEditedBy" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d5f96fb977b6c73c44b8b5c061480393ecb1c82",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1600,1604 @@      treeView.reset()\n      worksheetProvider.reset()\n      symbolSearch.reset()\n      buildTargets.addWorkspaceBuildTargets(i.workspaceBuildTargets)\n      buildTargets.addScalacOptions(i.scalacOptions)"
  },
  {
    "id" : "e1475e14-dd55-4531-8ae7-656ad561f636",
    "prId" : 1145,
    "prUrl" : "https://github.com/scalameta/metals/pull/1145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44270147-8af6-4e72-9cd4-4139876197f2",
        "parentId" : null,
        "authorId" : "99b86a37-7b24-412b-846e-038ecface4d6",
        "body" : "Why do we allow creating incompatible a BuildTool with incompatible version?",
        "createdAt" : "2019-12-05T08:10:37Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : "99b86a37-7b24-412b-846e-038ecface4d6",
        "tags" : [
        ]
      },
      {
        "id" : "d536a70c-57fb-4a10-ac4a-bcd83f6851b7",
        "parentId" : "44270147-8af6-4e72-9cd4-4139876197f2",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "This code is unchanged in this PR, it just moved causing a diff. Please open an issue if you want to follow up on this.",
        "createdAt" : "2019-12-05T10:29:23Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c032fa899f1747d53cf2025b6e1cf03227b19980",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1274,1278 @@    buildTools.loadSupported match {\n      case Some(buildTool) =>\n        val isCompatibleVersion = BuildTool.isCompatibleVersion(\n          buildTool.minimumVersion,\n          buildTool.version"
  },
  {
    "id" : "be99d3cf-f42a-4d78-b005-0e5bc89b2ea7",
    "prId" : 1145,
    "prUrl" : "https://github.com/scalameta/metals/pull/1145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "858d0b05-f601-4fe9-b540-ba9a300db244",
        "parentId" : null,
        "authorId" : "99b86a37-7b24-412b-846e-038ecface4d6",
        "body" : "Could you also include the minimal version which is required so the user knows how far it must be upgraded? Also, the recommended version, since it is already known, could be useful to the user.",
        "createdAt" : "2019-12-05T08:11:59Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : "99b86a37-7b24-412b-846e-038ecface4d6",
        "tags" : [
        ]
      },
      {
        "id" : "3b48f0ef-bca8-48d9-81b9-c46872c856db",
        "parentId" : "858d0b05-f601-4fe9-b540-ba9a300db244",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "This code is unchanged in this PR, it just moved causing a diff. Please open an issue if you want to follow up on this.",
        "createdAt" : "2019-12-05T10:29:32Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c032fa899f1747d53cf2025b6e1cf03227b19980",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1281,1285 @@          Some(buildTool)\n        } else {\n          scribe.warn(s\"Unsupported $buildTool version ${buildTool.version}\")\n          languageClient.showMessage(\n            messages.IncompatibleBuildToolVersion.params(buildTool)"
  },
  {
    "id" : "342cc0d8-0b95-41fb-9c26-10a103b7fc71",
    "prId" : 1089,
    "prUrl" : "https://github.com/scalameta/metals/pull/1089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10b42459-8ae1-4b96-bf6f-b4ece325800e",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Let's go back to Option[WorksheetProvider]",
        "createdAt" : "2019-11-28T15:12:17Z",
        "updatedAt" : "2019-12-06T16:11:03Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      },
      {
        "id" : "1b014ee5-4d42-4bf5-a481-dffc1641b9be",
        "parentId" : "10b42459-8ae1-4b96-bf6f-b4ece325800e",
        "authorId" : "58f39866-9870-40fc-83e0-d68edbbcb6f7",
        "body" : "why? Previously `Option` made sense, since there would not be a Provider always, and now we have fallback.",
        "createdAt" : "2019-11-29T10:43:52Z",
        "updatedAt" : "2019-12-06T16:11:03Z",
        "lastEditedBy" : "58f39866-9870-40fc-83e0-d68edbbcb6f7",
        "tags" : [
        ]
      },
      {
        "id" : "e9666986-ea79-425c-a7b1-6300b97a0f17",
        "parentId" : "10b42459-8ae1-4b96-bf6f-b4ece325800e",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Ok, right. Haven't thought about it!",
        "createdAt" : "2019-11-29T11:09:06Z",
        "updatedAt" : "2019-12-06T16:11:03Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2b310420ce80e33b8c8e4977b94f75be9e4f986",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +181,185 @@  var httpServer: Option[MetalsHttpServer] = None\n  var treeView: TreeViewProvider = NoopTreeViewProvider\n  var worksheetProvider: WorksheetProvider = _\n\n  def connectToLanguageClient(client: MetalsLanguageClient): Unit = {"
  },
  {
    "id" : "6a1954c6-5a9a-4761-ad45-3b8fcda99618",
    "prId" : 935,
    "prUrl" : "https://github.com/scalameta/metals/pull/935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a2e2c44-dd1a-4fff-a513-5110e950140b",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "Would it be possible to get this as part of the digest so that `import build` pops up?",
        "createdAt" : "2019-09-24T11:18:33Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      },
      {
        "id" : "f2827c29-7985-4f21-890c-334c80f4556b",
        "parentId" : "0a2e2c44-dd1a-4fff-a513-5110e950140b",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "Can you elaborate? Here we prompt the user to \"import build\" when the `pants-targets` setting changes. I have added a logging statement there for now. Down the road, it would be nice to prompt the user with a text box to provide what targets to run and then automatically update the setting for the user. We don't have the infrastructure to implement that yet, however.",
        "createdAt" : "2019-09-26T15:44:49Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      },
      {
        "id" : "96b79d29-5af1-4a72-9b1d-7fbf818f266e",
        "parentId" : "0a2e2c44-dd1a-4fff-a513-5110e950140b",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "In PantsDigest we have the UserConfiguration now so we could also digest targets in the settings and we would not need to do anything else. The user would get informed that their pants build changed and that they need to reimport.\r\n\r\nWe wouldn't need to have some special logic in MetalsLanguageServer",
        "createdAt" : "2019-09-27T15:14:13Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      },
      {
        "id" : "73915e3f-38e0-4ffe-93e7-dd9626553786",
        "parentId" : "0a2e2c44-dd1a-4fff-a513-5110e950140b",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "The reason we need this logic in `MetalsLanguageServer` is to trigger a new digest when the `pants-targets` setting changes. Even if we include the targets in the digest, we don't get a notification to trigger the digest until a BUILD file changes.",
        "createdAt" : "2019-12-03T16:19:35Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "a95ae87fd9621161d156685f32480fcb7bb451a4",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +809,813 @@            compilers.restartAll()\n          }\n          if (userConfig.pantsTargets != old.pantsTargets) {\n            slowConnectToBuildServer(forceImport = false).ignoreValue\n          } else {"
  },
  {
    "id" : "9b26b56f-dfc9-4db2-ac02-faa49c8d2991",
    "prId" : 865,
    "prUrl" : "https://github.com/scalameta/metals/pull/865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7953651-c266-4fc8-908f-809e1aadd843",
        "parentId" : null,
        "authorId" : "99b86a37-7b24-412b-846e-038ecface4d6",
        "body" : "does it work in vscode?  The [specification](https://microsoft.github.io/language-server-protocol/specification#textDocument_onTypeFormatting) expects a `List`, not an `Option[TextEdit]`.",
        "createdAt" : "2019-08-19T08:01:07Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : "99b86a37-7b24-412b-846e-038ecface4d6",
        "tags" : [
        ]
      },
      {
        "id" : "3c0b32f4-1069-4b3b-b4d1-fcb4560d5ee0",
        "parentId" : "c7953651-c266-4fc8-908f-809e1aadd843",
        "authorId" : "6e825584-bc46-4fb4-b86e-6d59c4460da4",
        "body" : "it doesn't, and you're right, I haven't noticed. But I've changed my ontypeformatting product to a list and the server still doesn't seem to be responding properly, so it's probably something deeper, too.",
        "createdAt" : "2019-08-19T13:33:32Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : "6e825584-bc46-4fb4-b86e-6d59c4460da4",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +850,854 @@    }\n  /*in order to use onTypeFormatting in vscode, you'll have to set editor.formatOnType = true in settings*/\n  @JsonRequest(\"textDocument/onTypeFormatting\")\n  def onTypeFormatting(\n      params: DocumentOnTypeFormattingParams"
  },
  {
    "id" : "7fb2329d-e42d-481a-9dd6-a8219911c3e5",
    "prId" : 853,
    "prUrl" : "https://github.com/scalameta/metals/pull/853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9459ccf9-82c8-4a7b-a973-fe413d701c97",
        "parentId" : null,
        "authorId" : "99b86a37-7b24-412b-846e-038ecface4d6",
        "body" : "or we could do:\r\n```scala\r\nval semanticDBDoc = semanticdbs.textDocument(source).documentIncludingStale\r\nif(semanticDBDoc.isEmpty){\r\n  warnings.noSemanticdb(source)\r\n} else {\r\n  val occurrence = for { ...} yield occ\r\n  occurrence match {\r\n    case None =>\r\n      // ignore\r\n    case Some(occ) =>\r\n      (...)\r\n  }\r\n}\r\n```\r\nwould probably make the logic simpler (no need to remember about semanticDBDoc being emoty or not when working on occurrences).\r\n\r\nor even something like that:\r\n\r\n```scala\r\n\r\nval semanticDBDoc = semanticdbs.textDocument(source).documentIncludingStale \r\nsemanticDBDoc match {\r\n  case None => warnings.noSemanticdb(source)\r\n  case Some(doc) =>\r\n    val occurrence = definitionProvider.positionOccurrence(source, position, doc).occurrence \r\n    occurrence.foreach { occ =>\r\n        (...)\r\n    }\r\n```",
        "createdAt" : "2019-08-06T06:02:20Z",
        "updatedAt" : "2019-08-06T06:03:27Z",
        "lastEditedBy" : "99b86a37-7b24-412b-846e-038ecface4d6",
        "tags" : [
        ]
      },
      {
        "id" : "eb80d0ba-8fb9-47d4-b8e4-93b906988c0e",
        "parentId" : "9459ccf9-82c8-4a7b-a973-fe413d701c97",
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "I'd rather not change too much now.",
        "createdAt" : "2019-08-06T08:40:43Z",
        "updatedAt" : "2019-08-06T08:40:44Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f941ddc821a1d4f1f99221abb996858261aa0e5",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1586,1590 @@          }\n        case None =>\n          if (semanticDBDoc.isEmpty) {\n            warnings.noSemanticdb(source)\n          }"
  },
  {
    "id" : "de57dd83-0d45-4ef9-9007-8acee202426f",
    "prId" : 775,
    "prUrl" : "https://github.com/scalameta/metals/pull/775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f35aac51-b3f2-4c04-b236-c51f14cdd3f2",
        "parentId" : null,
        "authorId" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "body" : "Just moved the implementation into `referencesResult` that returns `ReferencesResult` instead of `CompletableFuture[util.List[Location]]`.",
        "createdAt" : "2019-06-18T10:21:59Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "tags" : [
        ]
      },
      {
        "id" : "a719caec-9ad7-42f8-abce-177543ded270",
        "parentId" : "f35aac51-b3f2-4c04-b236-c51f14cdd3f2",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "Good idea",
        "createdAt" : "2019-06-18T12:52:02Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +821,825 @@  ): CompletableFuture[util.List[Location]] =\n    CancelTokens { _ =>\n      referencesResult(params).locations.asJava\n    }\n"
  },
  {
    "id" : "eda87d75-5e42-4536-8906-c0cb52962911",
    "prId" : 775,
    "prUrl" : "https://github.com/scalameta/metals/pull/775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a33eb69-ea78-4d9c-9d98-d548f7ca1bed",
        "parentId" : null,
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "typo\r\n```suggestion\r\n            val referenceContext = new ReferenceContext(false)\r\n```",
        "createdAt" : "2019-06-18T10:25:14Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +1446,1450 @@        case Some(occ) =>\n          if (occ.role.isDefinition) {\n            val referecneContext = new ReferenceContext(false)\n            val refParams = new ReferenceParams(referecneContext)\n            refParams.setTextDocument(position.getTextDocument())"
  },
  {
    "id" : "6acf885a-0cf2-4274-80c4-23bd029e3345",
    "prId" : 775,
    "prUrl" : "https://github.com/scalameta/metals/pull/775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8e83b9c-af16-45a0-9829-63a38b90dc3e",
        "parentId" : null,
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "```suggestion\r\n            val refParams = new ReferenceParams(referenceContext)\r\n```",
        "createdAt" : "2019-06-18T10:25:29Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +1447,1451 @@          if (occ.role.isDefinition) {\n            val referecneContext = new ReferenceContext(false)\n            val refParams = new ReferenceParams(referecneContext)\n            refParams.setTextDocument(position.getTextDocument())\n            refParams.setPosition(position.getPosition())"
  },
  {
    "id" : "627b244e-96df-4b00-a05c-61c2ee6d40b0",
    "prId" : 775,
    "prUrl" : "https://github.com/scalameta/metals/pull/775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "341ab9c6-e8f9-4ad5-a08f-87a687d4224a",
        "parentId" : null,
        "authorId" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "body" : "Returns `symbol` in addition to the `locations` because `TestingServer` requires symbol information.\r\nWrapping those by `DefinitionResult` for structuring the return value, but what I actually want is something like [`Definitionresult | ReferencesResult`](https://dotty.epfl.ch/docs/reference/new-types/union-types.html) haha.",
        "createdAt" : "2019-06-18T10:30:19Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "tags" : [
        ]
      },
      {
        "id" : "4372504e-9037-4a40-92d3-37ec6a560351",
        "parentId" : "341ab9c6-e8f9-4ad5-a08f-87a687d4224a",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "`Either[A, B]` should work OK for unions with two types",
        "createdAt" : "2019-06-18T12:55:26Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      },
      {
        "id" : "0f8f8d96-e0bd-490c-b0d1-94adad73710e",
        "parentId" : "341ab9c6-e8f9-4ad5-a08f-87a687d4224a",
        "authorId" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "body" : "That's right! But this time, let me leave the return value's type `Future[DefinitionResult]` because nesting `Either` inside `Future` makes things complicated and feels like to use something like `EitherT` ...",
        "createdAt" : "2019-06-18T16:19:23Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +1464,1468 @@                  semanticdb = None\n                )\n              )\n            }\n          } else {"
  },
  {
    "id" : "20a84c25-71ea-4e2b-8e9b-4190e31f6f00",
    "prId" : 775,
    "prUrl" : "https://github.com/scalameta/metals/pull/775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67710c47-4dae-4287-a456-7fd0120bba8c",
        "parentId" : null,
        "authorId" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "body" : "Call `definitionResult` even if it failed to retrieve the symbol information from semanticdb because `DefinitionProvider#definition` [fallback to finding definitions from a presentation compiler](https://github.com/scalameta/metals/blob/50912543e057d958e4a336a6028f74ebca71271e/metals/src/main/scala/scala/meta/internal/metals/DefinitionProvider.scala#L62) if no definition locations found from semanticdb.",
        "createdAt" : "2019-06-18T10:32:53Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : "8a84f8b6-8e04-4802-937a-9ed4764e8556",
        "tags" : [
        ]
      },
      {
        "id" : "f593e814-99e8-4562-bb5b-f34056d6202b",
        "parentId" : "67710c47-4dae-4287-a456-7fd0120bba8c",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "Sounds reasonable :+1:",
        "createdAt" : "2019-06-18T12:55:45Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +1473,1477 @@          // Even if it failed to retrieve the symbol occurrence from semanticdb,\n          // try to find its definitions from presentation compiler.\n          definitionResult(position, token)\n      }\n    } else {"
  },
  {
    "id" : "ac5849d6-0e5c-49ab-8fc3-f06d49b3efb1",
    "prId" : 729,
    "prUrl" : "https://github.com/scalameta/metals/pull/729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0955d42e-6931-45bc-9108-7a7d7659441a",
        "parentId" : null,
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "We already have tests to see that diagnostics are cleared for deleted files after a `didSave` notification. I manually verified that this works as soon as the file is deleted without a `didSave` notification. However, I don't think we can write a non-flaky test case to stress this situation since file watchers are quite unreliable between operating systems.",
        "createdAt" : "2019-05-24T13:08:22Z",
        "updatedAt" : "2019-05-24T13:08:22Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d1850b39031efae957be62d433b6c3d1aea8e09",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +672,676 @@    val isScalaOrJava = path.isScalaOrJava\n    if (isScalaOrJava && event.eventType() == EventType.DELETE) {\n      diagnostics.didDelete(path)\n      CompletableFuture.completedFuture(())\n    } else if (isScalaOrJava && !savedFiles.isRecentlyActive(path)) {"
  },
  {
    "id" : "b36c7431-82b1-4600-8bb0-24936e0b5913",
    "prId" : 709,
    "prUrl" : "https://github.com/scalameta/metals/pull/709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6543be70-11e6-404a-b0d3-dceeb5f19cf2",
        "parentId" : null,
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "`SyntaxErrorSlowSuite` had become flaky until we merged the `parseTrees` and `onChange` futures here",
        "createdAt" : "2019-05-31T13:41:04Z",
        "updatedAt" : "2019-05-31T13:43:04Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +652,656 @@    buffers.put(path, path.toInput.text)\n    Future\n      .sequence(List(parseTrees(path), onChange(List(path))))\n      .ignoreValue\n      .asJava"
  },
  {
    "id" : "a230a428-404d-4c95-be26-2aeb11639813",
    "prId" : 534,
    "prUrl" : "https://github.com/scalameta/metals/pull/534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c2998e1-0ca6-42a7-aa7f-7fedaab8eee4",
        "parentId" : null,
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "minor, but you could use a SAM and this becomes:\r\n\r\n```scala\r\nsh.schedule(\r\n  () => tables.jarSymbols.deleteNotUsedTopLevels(usedJars.toArray),\r\n  2,\r\n  TimeUnit.SECONDS\r\n)\r\n```",
        "createdAt" : "2019-02-24T16:35:57Z",
        "updatedAt" : "2019-02-24T16:35:58Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      },
      {
        "id" : "29cea1fd-8620-4968-aef5-911e089e04f5",
        "parentId" : "3c2998e1-0ca6-42a7-aa7f-7fedaab8eee4",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "Some overloads on `ExecutorService` don't work with SAM, I can't remember which exact one. I don't mind `new Runnable { ... }`",
        "createdAt" : "2019-02-24T16:38:36Z",
        "updatedAt" : "2019-02-24T16:38:37Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "68a865709d6bc7d432ff4ffaa2fe1eac07d7409a",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +1220,1224 @@      },\n      2,\n      TimeUnit.SECONDS\n    )\n  }"
  },
  {
    "id" : "88192a6e-5f5a-491c-b813-cd60623f2f68",
    "prId" : 469,
    "prUrl" : "https://github.com/scalameta/metals/pull/469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdc50f6d-79cb-4090-ab2c-c6fbd9e7a3f8",
        "parentId" : null,
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "This case can be collapsed with the previous one",
        "createdAt" : "2019-01-13T22:06:15Z",
        "updatedAt" : "2019-01-14T10:14:10Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      },
      {
        "id" : "1cc3cfa8-5b50-4575-b921-44a48456759c",
        "parentId" : "bdc50f6d-79cb-4090-ab2c-c6fbd9e7a3f8",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "Huh, on my computer the code is different 🤔 \r\n```scala\r\n          case EventType.OVERFLOW =>\r\n            referencesProvider.onOverflow(event.path())\r\n```\r\n\r\nStill no diff, gonna push again.",
        "createdAt" : "2019-01-14T10:21:52Z",
        "updatedAt" : "2019-01-14T10:21:52Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      },
      {
        "id" : "d4ee23a2-ed9f-4173-abdb-0ff7b5c0144d",
        "parentId" : "bdc50f6d-79cb-4090-ab2c-c6fbd9e7a3f8",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "GitHub updated the diff now, it's a different case that we handle specially.",
        "createdAt" : "2019-01-14T10:22:40Z",
        "updatedAt" : "2019-01-14T10:22:40Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f3b70a1cd802829c6ddea08ce8fb12a2d374db9",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +518,522 @@          case EventType.CREATE | EventType.MODIFY =>\n            referencesProvider.onChange(event.path())\n          case EventType.OVERFLOW =>\n            referencesProvider.onOverflow(event.path())\n        }"
  },
  {
    "id" : "e01ce6fe-a41d-4924-b2fa-a90c939e31e4",
    "prId" : 360,
    "prUrl" : "https://github.com/scalameta/metals/pull/360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88628664-a5e3-47f3-bd37-ca8c4f790217",
        "parentId" : null,
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "Is this call idepmpotent? Calling shutdown then exit will go through shutdown twice.",
        "createdAt" : "2018-11-30T09:38:26Z",
        "updatedAt" : "2018-11-30T09:46:56Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      },
      {
        "id" : "2c9a6107-33d2-4ac5-bdbe-097c787bb740",
        "parentId" : "88628664-a5e3-47f3-bd37-ca8c4f790217",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "Yes it is, added a comment to explain why.",
        "createdAt" : "2018-11-30T09:51:22Z",
        "updatedAt" : "2018-11-30T09:51:22Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c441cb0027d2d58f8b05e52df0b3d74440bfd5b2",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +348,352 @@  def exit(): Unit = {\n    // `shutdown` is idempotent, we can trigger it as often as we like.\n    shutdown()\n    // Ensure that `shutdown` has completed before killing the process.\n    // Some clients may send `exit` immediately after `shutdown` causing"
  },
  {
    "id" : "e686991f-08e6-4cd4-ba94-43e40a9bd482",
    "prId" : 337,
    "prUrl" : "https://github.com/scalameta/metals/pull/337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9abef78-358c-434c-a077-29289d51dc36",
        "parentId" : null,
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "if you want you can use a SAM:\r\n\r\n```scala\r\nsh.schedule(() => initialized(new InitializedParams), 1, TimeUnit.SECONDS)\r\n```",
        "createdAt" : "2018-11-24T13:14:14Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      },
      {
        "id" : "bb29b801-863e-4166-89b0-204edac08b0e",
        "parentId" : "c9abef78-358c-434c-a077-29289d51dc36",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "Updated. SAM sure is prettier, and for dealing with Java collections they're almost a necessity (I can never get the covariant/contravarian bounds right for `java.util.function.Function`). ",
        "createdAt" : "2018-11-25T11:32:26Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      },
      {
        "id" : "77cce8d9-43d9-4a25-9749-df4c6f5762d9",
        "parentId" : "c9abef78-358c-434c-a077-29289d51dc36",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "Sure would be nice to have  a Scalafix rewrite to fix these automatically.\r\n\r\nAs for 2.11 support, I would rather explore classloading 2.11 presentation compiler from a 2.12 server instead of compiling the server to 2.11.",
        "createdAt" : "2018-11-25T11:33:38Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +176,180 @@      capabilities.setTextDocumentSync(TextDocumentSyncKind.Full)\n      if (config.isNoInitialized) {\n        sh.schedule(\n          () => initialized(new InitializedParams),\n          1,"
  },
  {
    "id" : "4815daeb-d454-4fe1-8e86-4099659e18c4",
    "prId" : 337,
    "prUrl" : "https://github.com/scalameta/metals/pull/337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a8a9c2a-4b24-470f-bdcf-da66826052a3",
        "parentId" : null,
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "is everything internal?",
        "createdAt" : "2018-11-24T13:28:47Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      },
      {
        "id" : "c53d28aa-539a-452c-986a-c3e762528fc3",
        "parentId" : "0a8a9c2a-4b24-470f-bdcf-da66826052a3",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "Yes, only `scala.meta.metals.Main` is public.",
        "createdAt" : "2018-11-25T11:29:03Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@package scala.meta.internal.metals\n\nimport ch.epfl.scala.bsp4j.BuildTargetIdentifier"
  },
  {
    "id" : "73b32df4-b2ae-46c3-a3f0-b398effc6114",
    "prId" : 337,
    "prUrl" : "https://github.com/scalameta/metals/pull/337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dc58745-3a5b-451e-9294-f96b5fbd53b8",
        "parentId" : null,
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "what's this call for?",
        "createdAt" : "2018-11-24T13:49:38Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      },
      {
        "id" : "cc9473b2-6b68-4031-aab6-c069c1a9721e",
        "parentId" : "1dc58745-3a5b-451e-9294-f96b5fbd53b8",
        "authorId" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "body" : "Added comment\r\n```scala\r\n      // Record what build target this dependency source (if any) was jumped from,\r\n      // needed to know what classpath to compile the dependency source with.\r\n```",
        "createdAt" : "2018-11-25T11:38:55Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : "a2bc4287-0a04-46c7-ab03-33243f01e61a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : 737,
    "diffHunk" : "@@ -1,1 +735,739 @@      // Record what build target this dependency source (if any) was jumped from,\n      // needed to know what classpath to compile the dependency source with.\n      interactiveSemanticdbs.didDefinition(source, result)\n      result\n    } else {"
  }
]