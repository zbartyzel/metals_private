[
  {
    "id" : "5991a28b-7a6c-4336-a087-c40976548af5",
    "prId" : 709,
    "comments" : [
      {
        "id" : "b1d82ddb-cea1-4245-a95c-5f619c332b68",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "`Pauseable` or `Pausable`? (I honestly don't know) ;)",
        "createdAt" : "2019-05-31T14:05:07Z",
        "updatedAt" : "2019-05-31T14:07:10Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fbfe969b-1e01-43eb-9e00-279acb424668",
        "parentId" : "b1d82ddb-cea1-4245-a95c-5f619c332b68",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I googled myself, seems pauseable is OK, similar to `Cancelable`.",
        "createdAt" : "2019-05-31T14:49:53Z",
        "updatedAt" : "2019-05-31T14:49:54Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@ * Interface for something that can be paused and unpaused, for example a stream of compile requests.\n */\ntrait Pauseable {\n  final val isPaused = new AtomicBoolean(false)\n"
  },
  {
    "id" : "e290e30d-b555-4660-96e1-845f186ecb3c",
    "prId" : 709,
    "comments" : [
      {
        "id" : "712831a6-0695-400b-9b39-d9e01d5f8989",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "or maybe `resume`?",
        "createdAt" : "2019-05-31T14:05:41Z",
        "updatedAt" : "2019-05-31T14:07:10Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "82bd2e28-3ece-4b71-9900-205d6396859d",
        "parentId" : "712831a6-0695-400b-9b39-d9e01d5f8989",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I prefer `unpause` for consistency with `pause`",
        "createdAt" : "2019-05-31T14:50:11Z",
        "updatedAt" : "2019-05-31T14:50:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +13,17 @@    doPause()\n  }\n  final def unpause(): Unit = {\n    isPaused.set(false)\n    doUnpause()"
  },
  {
    "id" : "42637d76-eaa9-4f03-9218-de5f481c6095",
    "prId" : 709,
    "comments" : [
      {
        "id" : "e4a018ff-074f-4760-aff2-059e5b76f2d6",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "why not `from` - the fact that it is from `Pauseables` is already expressed in the type. Unless it is to circumvent the generics?",
        "createdAt" : "2019-05-31T14:06:41Z",
        "updatedAt" : "2019-05-31T14:07:10Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "761269c8-9259-4d22-bb60-20e6f9a3c57a",
        "parentId" : "e4a018ff-074f-4760-aff2-059e5b76f2d6",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "No issue with generics, just `fromX` feels consistent with similar APIs like `Json.fromString`. `Pauseable.fromPauseables` can be read as \"create a single pauseable from this list of pauseables\"",
        "createdAt" : "2019-05-31T14:51:40Z",
        "updatedAt" : "2019-05-31T14:51:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@\n  /** Merges a list of Pausables into a single Pauseable. */\n  def fromPausables(all: Iterable[Pauseable]): Pauseable = new Pauseable {\n    override def doPause(): Unit = Cancelable.cancelEach(all)(_.pause())\n    override def doUnpause(): Unit = Cancelable.cancelEach(all)(_.unpause())"
  }
]