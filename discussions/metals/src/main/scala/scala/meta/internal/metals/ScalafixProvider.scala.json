[
  {
    "id" : "7fcb699b-eee0-4d34-adaf-716c83a89904",
    "prId" : 2119,
    "comments" : [
      {
        "id" : "fe1365e6-2c60-4968-93f5-5008212f541d",
        "parentId" : null,
        "author" : {
          "login" : "mlachkar",
          "name" : "Meriam Lachkar",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "body" : "I would change this for comprehension from option to Try to get errors when failing downloading scalafix or the rule. It will also be easier to add error message on other part.\r\n```\r\n  private def getScalafix(\r\n      scalaBinaryVersion: ScalaBinaryVersion\r\n  ): Try[Scalafix] = {\r\n    scalafixCache\r\n      .get(scalaBinaryVersion)\r\n      .toTry\r\n      .orElse(\r\n        statusBar.trackBlockingTask(\"Downloading scalafix\") {\r\n          Try(Scalafix.fetchAndClassloadInstance(scalaBinaryVersion))\r\n            .map { api =>\r\n              scalafixCache.update(scalaBinaryVersion, api)\r\n              api\r\n            }\r\n        }\r\n      )\r\n  }\r\n\r\n  private def getRuleClassLoader(\r\n      scalaBinaryVersion: ScalaBinaryVersion,\r\n      scalafixClassLoader: ClassLoader\r\n  ): Try[URLClassLoader] = {\r\n    val pathsOpt = organizeImportRuleCache\r\n      .get(scalaBinaryVersion)\r\n      .toTry\r\n      .orElse(\r\n        statusBar.trackBlockingTask(\"Downloading organize import rule\") {\r\n          Try(Embedded.organizeImportRule(scalaBinaryVersion))\r\n            .map { paths =>\r\n              organizeImportRuleCache.update(scalaBinaryVersion, paths)\r\n              paths\r\n            }\r\n        }\r\n      )\r\n    pathsOpt.map(paths =>\r\n      Embedded.toClassLoader(\r\n        Classpath(paths.map(AbsolutePath(_))),\r\n        scalafixClassLoader\r\n      )\r\n    )\r\n  }\r\n// to add with the rest of extension methods we have on Option.\r\n  implicit class OptionExtension[A](val in: Option[A]) extends AnyVal {\r\n    def toTry(e: => Throwable): Try[A] = in match {\r\n      case Some(v) => Success(v)\r\n      case None => Failure(e)\r\n    }\r\n\r\n    def toTry = toTry(new Exception(\"None.get \"))\r\n  \r\n```\r\n\r\nThis way we will cover this error. ",
        "createdAt" : "2020-10-05T11:07:33Z",
        "updatedAt" : "2020-10-05T17:36:58Z",
        "lastEditedBy" : {
          "login" : "mlachkar",
          "name" : "Meriam Lachkar",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "539b9df1-4a5c-4320-b8cd-ed94e8741410",
        "parentId" : "fe1365e6-2c60-4968-93f5-5008212f541d",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Thanks, I changed it a bit, but stayed why Try as you suggested.",
        "createdAt" : "2020-10-05T17:09:09Z",
        "updatedAt" : "2020-10-05T17:36:58Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b271a278ae2c881051a18b72dc1b1f97da8cb4cb",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +57,61 @@        val scalaBinaryVersion = scalaTarget.scalaBinaryVersion\n        val scalafixEvaluation = for {\n          api <- getScalafix(scalaBinaryVersion)\n          urlClassLoaderWithExternalRule <- getRuleClassLoader(\n            scalaBinaryVersion,"
  },
  {
    "id" : "afd252f8-8a50-4aa4-a7e7-8dd5da5b6daf",
    "prId" : 2119,
    "comments" : [
      {
        "id" : "0c46e39c-37e4-4f3d-9576-5ebb245b6e0a",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Changed it to Classlaoder, since otherwise we create a new classlaoder on each run, which can really grow the memory.",
        "createdAt" : "2020-10-06T10:39:28Z",
        "updatedAt" : "2020-10-06T10:39:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b271a278ae2c881051a18b72dc1b1f97da8cb4cb",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +34,38 @@  private val scalafixCache = TrieMap.empty[ScalaBinaryVersion, Scalafix]\n  private val organizeImportRuleCache =\n    TrieMap.empty[ScalaBinaryVersion, URLClassLoader]\n\n  def organizeImports("
  },
  {
    "id" : "eed6c564-146f-4d5e-bcc8-341381b4e04b",
    "prId" : 1971,
    "comments" : [
      {
        "id" : "ec4347f6-a020-4be8-b10f-c43c24200958",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Should we not use concurrent map here? What if someone quickly runs optimize imports a couple of times? We should wait and not run additional times",
        "createdAt" : "2020-09-14T18:40:52Z",
        "updatedAt" : "2020-09-25T12:46:58Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dcb31805-452c-46c9-ac2b-707693e2bcbf",
        "parentId" : "ec4347f6-a020-4be8-b10f-c43c24200958",
        "author" : {
          "login" : "mlachkar",
          "name" : "Meriam Lachkar",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "body" : "We decided to keep TrieMap after discussing it.",
        "createdAt" : "2020-09-25T12:43:10Z",
        "updatedAt" : "2020-09-25T12:46:58Z",
        "lastEditedBy" : {
          "login" : "mlachkar",
          "name" : "Meriam Lachkar",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8f623f507d61ccbcd02d982594a8b0d46c292509",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +103,107 @@          Try(Scalafix.fetchAndClassloadInstance(scalaBinaryVersion)).toOption\n            .map { api =>\n              scalafixCache.update(scalaBinaryVersion, api)\n              api\n            }"
  }
]