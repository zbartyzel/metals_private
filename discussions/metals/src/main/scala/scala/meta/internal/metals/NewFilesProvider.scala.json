[
  {
    "id" : "b9bedf4c-cfd9-495e-83f9-a154c73bed77",
    "prId" : 1846,
    "comments" : [
      {
        "id" : "0fe5799e-7906-4a01-bc0a-95e6154cbc06",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ah, good call adding this in 👍 ",
        "createdAt" : "2020-06-19T19:58:10Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10223975ce00488d39a58765d57e434b217aeb21",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +35,39 @@  private val worksheetPick =\n    MetalsQuickPickItem(id = \"worksheet\", label = \"Worksheet\")\n  private val ammonitePick =\n    MetalsQuickPickItem(id = \"ammonite\", label = \"Ammonite script\")\n"
  },
  {
    "id" : "e5a4ca63-1774-47d8-a73f-bc60e3a899c0",
    "prId" : 1528,
    "comments" : [
      {
        "id" : "646b976f-31b7-423b-8067-32ec49af024e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I've changed this to also accept a `name`, so that we can skip the name-picking dialog and just ask for a file kind.\r\n\r\nThis allows the code action to fully re-use the existing provider's flow, which I think is really nice",
        "createdAt" : "2020-03-23T10:23:00Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "29e8820c0560d7d7e678b124344d3884ba5c2bda",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +35,39 @@  def createNewFileDialog(\n      directoryUri: Option[URI],\n      name: Option[String]\n  ): Future[Unit] = {\n    val directory = directoryUri"
  },
  {
    "id" : "850824ba-af5a-435e-a6b3-e7ab8793e9c1",
    "prId" : 1528,
    "comments" : [
      {
        "id" : "415320bd-27e9-42c0-aa55-7b2b60495413",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "My editor is set to strip out whitespaces on save, so I've been struggling with this.\r\n\r\nI think it's much clearer this way, anyway.",
        "createdAt" : "2020-03-23T11:41:18Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2ab17664-71a9-4e59-bf63-5853def7fba7",
        "parentId" : "415320bd-27e9-42c0-aa55-7b2b60495413",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree this is clearer. I also have my editor remove trailing whitespace on save, intellij has this enabled by default, so we should not rely on it in our tests",
        "createdAt" : "2020-03-23T12:23:16Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9b95e8f8-f81d-44c8-889d-3890bd305736",
        "parentId" : "415320bd-27e9-42c0-aa55-7b2b60495413",
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I also like this as I get a warning in vim about trailing whitespaces all the time ha.",
        "createdAt" : "2020-03-23T12:30:24Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "29e8820c0560d7d7e678b124344d3884ba5c2bda",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +199,203 @@    val indent = \"  \"\n    s\"\"\"|$kind $name {\n        |$indent\n        |}\n        |\"\"\".stripMargin"
  },
  {
    "id" : "f673630e-3685-4ddc-aff6-0a9cbea0b73b",
    "prId" : 1447,
    "comments" : [
      {
        "id" : "be41c3d3-9e7b-44ba-a5e3-ed1d1b2b6201",
        "parentId" : null,
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : "Aleksei Alefirov",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "I've made some kind of DSL here, to cover `Future[Option[_]]` handling (making this method more or readable). `Future` is for about remote requests, and `Option` reflect that the request can be cancelled (thus, nothing should be returned eventually).\r\nNot sure, if it's good here.",
        "createdAt" : "2020-02-17T19:04:26Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : "Aleksei Alefirov",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +37,41 @@\n    val newlyCreatedFile =\n      askForKind\n        .flatMapOption {\n          case kind @ (classPick.id | objectPick.id | traitPick.id) =>"
  },
  {
    "id" : "d455a893-d841-4f4c-910a-7cb445972e90",
    "prId" : 1447,
    "comments" : [
      {
        "id" : "9051871c-05ae-4dbb-b702-1052e83e3b69",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "What happens if the name is `a/b/c/A` - I think we should create the directories there. Most likely `createFile` should also create directories? Package will then be added automatically which is neat.",
        "createdAt" : "2020-02-19T18:36:55Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "562c315b-c3f4-4db0-9391-93612f1e801c",
        "parentId" : "9051871c-05ae-4dbb-b702-1052e83e3b69",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : "Aleksei Alefirov",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "it fails. Not really sure, it looks neat to ask for the name for the new class `foo/Bar` to create `class Bar`at `foo/Bar.scala`",
        "createdAt" : "2020-02-20T15:41:14Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : "Aleksei Alefirov",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "491ac90e-4d60-499e-8292-9cdb17db6a7b",
        "parentId" : "9051871c-05ae-4dbb-b702-1052e83e3b69",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we implement it here? I think we just need to do `getParent.mkdirs`",
        "createdAt" : "2020-02-21T13:09:48Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +100,104 @@      kind: String\n  ): Future[AbsolutePath] = {\n    val path = directory.getOrElse(workspace).resolve(name + \".scala\")\n    //name can be actually be \"foo/Name\", where \"foo\" is a folder to create\n    val className = directory.getOrElse(workspace).resolve(name).filename"
  }
]