[
  {
    "id" : "bbb7f334-bb24-49bb-a67c-541e7cf72c83",
    "prId" : 2014,
    "comments" : [
      {
        "id" : "d0d465dc-cb27-47a5-a47f-5fc83409ab7b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe we could change it to :\r\n`@volatile private var repository: Option[FileTreeRepository[HashCode]] = None`\r\n?",
        "createdAt" : "2020-08-21T10:39:23Z",
        "updatedAt" : "2020-08-22T03:26:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c8d9621e-7f99-4147-9c1f-8dda19d99ddc",
        "parentId" : "d0d465dc-cb27-47a5-a47f-5fc83409ab7b",
        "author" : {
          "login" : "eatkins",
          "name" : "Ethan Atkins",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/2658825?u=8ff05fe0cc4369d7c79d2521ef29f314e11445c2&v=4"
        },
        "body" : "This is obviously a coding preference thing but I prefer using `AtomicReference` to the `var foo: Option[X] = None` pattern. I know that using null is often considered an anti-pattern in scala but I find that atomic references work really nicely. They force you to think about the state of the variable more than a var does because you can't simply dereference it like a var, you have to call `get` on it. This makes me think more about the control flow that leads to the call to `get` and what state I expect the variable to be in which I find helpful for mutable references. Of course it could be `AtomicReference[Option[FileTreeRepository[HashCode]]]` to avoid null handling but I like avoiding unnecessary boxing where possible.\r\n\r\nThat being said, this is just my personal stylistic preference and isn't important to this particular change set so if you would feel more comfortable with a `var`, I'll make that change.",
        "createdAt" : "2020-08-21T16:07:11Z",
        "updatedAt" : "2020-08-22T03:26:11Z",
        "lastEditedBy" : {
          "login" : "eatkins",
          "name" : "Ethan Atkins",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/2658825?u=8ff05fe0cc4369d7c79d2521ef29f314e11445c2&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b536f8ca-4dd8-44c4-96a3-c64a48181c3d",
        "parentId" : "d0d465dc-cb27-47a5-a47f-5fc83409ab7b",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Both are really not ideal. We can leave as is, thanks!",
        "createdAt" : "2020-08-21T16:46:21Z",
        "updatedAt" : "2020-08-22T03:26:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "13192ebb3ddfb265aceb4225904caf6a57ae07e0",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +77,81 @@  override def cancel(): Unit = {\n    repository.getAndSet(null) match {\n      case null =>\n      case r => r.close()\n    }"
  },
  {
    "id" : "d239bb57-8cdd-4575-a917-7f118aac61a3",
    "prId" : 1629,
    "comments" : [
      {
        "id" : "5596cf80-71f6-497a-9b09-2cc4eef4e451",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could you add a comment on why you need to sort and reverse it? It took me a while to realize what's going on.",
        "createdAt" : "2020-04-16T14:06:49Z",
        "updatedAt" : "2020-04-17T10:03:37Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e56dc68e-2fd9-45d1-bd0b-74d17b0a0b90",
        "parentId" : "5596cf80-71f6-497a-9b09-2cc4eef4e451",
        "author" : {
          "login" : "mlachkar",
          "name" : "Meriam Lachkar",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "body" : "you're right. In fact we need to delete all children before parent paths.",
        "createdAt" : "2020-04-16T14:10:07Z",
        "updatedAt" : "2020-04-17T10:03:37Z",
        "lastEditedBy" : {
          "login" : "mlachkar",
          "name" : "Meriam Lachkar",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "11a3ce5f2d61d4805920381b556695ad432792e5",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +99,103 @@    startWatching(new ju.ArrayList(sourceDirectoriesToWatch))\n    // reverse sorting here is necessary to delete parent paths at the end\n    createdSourceDirectories.asScala.sortBy(_.toNIO).reverse.foreach { dir =>\n      if (dir.isEmptyDirectory) {\n        dir.delete()"
  },
  {
    "id" : "655831bd-e64a-40ef-a22f-eb6e74ec3181",
    "prId" : 1435,
    "comments" : [
      {
        "id" : "d7e3dbce-faf2-4d05-8338-fe0497bd2c14",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : "Krzysiek Bochenek",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "we could add a comment why it has dedicated branch that is doing the same logic.",
        "createdAt" : "2020-02-17T13:01:21Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : "Krzysiek Bochenek",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dff26cad-5fa0-42db-91b4-021136f7530a",
        "parentId" : "d7e3dbce-faf2-4d05-8338-fe0497bd2c14",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "added",
        "createdAt" : "2020-02-17T14:48:30Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb025d5358f8296b853bbb7ede33b89e75356b35",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +130,134 @@    override def onEvent(event: DirectoryChangeEvent): Unit = {\n      // in non-MacOS systems the path will be null\n      if (event.eventType() == EventType.OVERFLOW) {\n        didChangeWatchedFiles(event)\n      } else if (!Files.isDirectory(event.path())) {"
  },
  {
    "id" : "c7a7509b-c457-4ff7-8ecc-61f833a7122e",
    "prId" : 857,
    "comments" : [
      {
        "id" : "64002d45-c46c-4972-b655-74238ee1e8d8",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "please, add a comment that we create those paths just to get a notification they don't exist",
        "createdAt" : "2019-08-08T06:56:56Z",
        "updatedAt" : "2019-08-08T16:25:02Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9871a0ff-1f5e-4abe-9a8d-44279505370c",
        "parentId" : "64002d45-c46c-4972-b655-74238ee1e8d8",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "added",
        "createdAt" : "2019-08-08T12:31:23Z",
        "updatedAt" : "2019-08-08T16:25:02Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0dd3eede29c603619dd79001b736615bb5743729",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +67,71 @@    val createdSourceDirectories = new util.ArrayList[AbsolutePath]()\n    def watch(path: AbsolutePath, isSource: Boolean): Unit = {\n      if (!path.isDirectory && !path.isFile) {\n        val pathToCreate = if (path.isScalaOrJava) {\n          AbsolutePath(path.toNIO.getParent())"
  }
]