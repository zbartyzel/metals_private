[
  {
    "id" : "9ac443e9-95c4-47a9-8249-a99275cd07f3",
    "prId" : 1652,
    "prUrl" : "https://github.com/scalameta/metals/pull/1652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09327b50-f3cd-43f1-b6f4-2c0bd916fb01",
        "parentId" : null,
        "authorId" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "body" : "I'm curious if showing the `unambiguous` is a bit verbose to the user.\r\n```suggestion\r\n    s\"Import all possible missing symbols\"\r\n```\r\nWhat do you think?",
        "createdAt" : "2020-04-22T07:35:08Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : "43e93173-6a0c-470b-b449-2889fd9eb639",
        "tags" : [
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +98,102 @@\n  def allSymbolsTitle: String =\n    s\"Import all missing symbols that are unambiguous\"\n}"
  },
  {
    "id" : "acedf51a-51ba-4ae6-b836-e0f170d9d117",
    "prId" : 1652,
    "prUrl" : "https://github.com/scalameta/metals/pull/1652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fa55b6f-dfbe-4af6-8f5d-be1c6fb92e20",
        "parentId" : null,
        "authorId" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "body" : "I think we could just join all the textEdits into a single text edit, which might help with the tests and the additional newline. ",
        "createdAt" : "2020-04-22T14:27:30Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : "a7ecab15-7126-4839-9885-ed1a3031e6b8",
        "tags" : [
        ]
      },
      {
        "id" : "2bc53f13-5467-479f-ae18-a70e3f568042",
        "parentId" : "3fa55b6f-dfbe-4af6-8f5d-be1c6fb92e20",
        "authorId" : "8d4b8899-1231-4d1e-af93-e5b0d51464f6",
        "body" : "I managed to fix everything that way without changing anything to the TextEdits.scala file. I don't know if this is the right way but it seems that imports are always coming in different order so maybe it is.",
        "createdAt" : "2020-04-23T07:04:40Z",
        "updatedAt" : "2020-04-23T07:04:40Z",
        "lastEditedBy" : "8d4b8899-1231-4d1e-af93-e5b0d51464f6",
        "tags" : [
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +73,77 @@        allSymbols.setKind(l.CodeActionKind.QuickFix)\n        allSymbols.setDiagnostics(diags.asJava)\n        allSymbols.setEdit(new l.WorkspaceEdit(Map(uri -> edits.asJava).asJava))\n\n        allSymbols +: codeActions"
  },
  {
    "id" : "b5bde034-919c-4205-b161-474cc06d689f",
    "prId" : 1286,
    "prUrl" : "https://github.com/scalameta/metals/pull/1286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96ced056-4ffe-4d11-b9c4-ce3479273c45",
        "parentId" : null,
        "authorId" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "body" : "we cannot use `encloses` because sometimes the code action range is smaller than the diagnostic range, for example:\r\n\r\n```scala\r\nval x = Future.successful(2)\r\n//      ^^^^^^  diagnostic range\r\n//       <-->   code action range\r\n```\r\n\r\nor even partially overlapping\r\n\r\n```scala\r\nval x = Future.successful(2)\r\n//      ^^^^^^  diagnostic range\r\n//         <------->   code action range\r\n```",
        "createdAt" : "2020-01-11T16:13:19Z",
        "updatedAt" : "2020-01-11T17:12:09Z",
        "lastEditedBy" : "bc07a4cc-a4ee-48f6-ae1e-f36bf246c466",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e6135a896a913f6ec9a1ae82ca098806ffdfea3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +47,51 @@      .sequence(params.getContext().getDiagnostics().asScala.collect {\n        case d @ ScalacDiagnostic.SymbolNotFound(name)\n            if params.getRange().overlapsWith(d.getRange()) =>\n          importMissingSymbol(d, name)\n      })"
  }
]