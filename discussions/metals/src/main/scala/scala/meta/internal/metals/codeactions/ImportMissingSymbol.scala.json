[
  {
    "id" : "32fa3437-7552-4399-850f-560346716642",
    "prId" : 1652,
    "comments" : [
      {
        "id" : "6949d1c9-9a55-4cd3-aac8-e14a74f35334",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I'm curious if showing the `unambiguous` is a bit verbose to the user.\r\n```suggestion\r\n    s\"Import all possible missing symbols\"\r\n```\r\nWhat do you think?",
        "createdAt" : "2020-04-22T07:35:08Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +98,102 @@\n  def allSymbolsTitle: String =\n    s\"Import all missing symbols that are unambiguous\"\n}"
  },
  {
    "id" : "d0456e9f-48d1-4a4e-afa7-42c0a2f16b5e",
    "prId" : 1652,
    "comments" : [
      {
        "id" : "569908ed-bcd6-494c-9fbe-3a2aab259c71",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think we could just join all the textEdits into a single text edit, which might help with the tests and the additional newline. ",
        "createdAt" : "2020-04-22T14:27:30Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "682eaabb-eff4-49fe-be67-32f3d6d6c430",
        "parentId" : "569908ed-bcd6-494c-9fbe-3a2aab259c71",
        "author" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "body" : "I managed to fix everything that way without changing anything to the TextEdits.scala file. I don't know if this is the right way but it seems that imports are always coming in different order so maybe it is.",
        "createdAt" : "2020-04-23T07:04:40Z",
        "updatedAt" : "2020-04-23T07:04:40Z",
        "lastEditedBy" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +73,77 @@        allSymbols.setKind(l.CodeActionKind.QuickFix)\n        allSymbols.setDiagnostics(diags.asJava)\n        allSymbols.setEdit(new l.WorkspaceEdit(Map(uri -> edits.asJava).asJava))\n\n        allSymbols +: codeActions"
  },
  {
    "id" : "b2f9cbff-c875-46bd-8c42-aa8880ec2a23",
    "prId" : 1286,
    "comments" : [
      {
        "id" : "25e04695-acb5-4ab4-80b9-6d345e3305a3",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "we cannot use `encloses` because sometimes the code action range is smaller than the diagnostic range, for example:\r\n\r\n```scala\r\nval x = Future.successful(2)\r\n//      ^^^^^^  diagnostic range\r\n//       <-->   code action range\r\n```\r\n\r\nor even partially overlapping\r\n\r\n```scala\r\nval x = Future.successful(2)\r\n//      ^^^^^^  diagnostic range\r\n//         <------->   code action range\r\n```",
        "createdAt" : "2020-01-11T16:13:19Z",
        "updatedAt" : "2020-01-11T17:12:09Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7e6135a896a913f6ec9a1ae82ca098806ffdfea3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +47,51 @@      .sequence(params.getContext().getDiagnostics().asScala.collect {\n        case d @ ScalacDiagnostic.SymbolNotFound(name)\n            if params.getRange().overlapsWith(d.getRange()) =>\n          importMissingSymbol(d, name)\n      })"
  }
]