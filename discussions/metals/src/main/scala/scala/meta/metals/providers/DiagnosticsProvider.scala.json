[
  {
    "id" : "d6d44bf2-920c-484f-8638-7731cb802cc2",
    "prId" : 215,
    "comments" : [
      {
        "id" : "6bd83979-8256-484b-8490-ca9c73be3f0d",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : "Alexey Alekhin",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I was doubting whether this should use the code from `ScalaErrorReporter` instead, like this:\r\n\r\n```scala\r\n  private def scalacAnalyze(doc: m.Document): Seq[Diagnostic] = {\r\n    val index = EagerInMemorySemanticdbIndex(\r\n      m.Database(doc :: Nil),\r\n      m.Sourcepath(Nil),\r\n      m.Classpath(Nil)\r\n    )\r\n    for {\r\n      doc <- index.database.documents\r\n      msg <- doc.messages\r\n    } yield msg.toLSP(\"scalac\")\r\n  }\r\n```\r\n\r\nI tried it, but it was glitchy so I left it as is. I don't understand very well why `EagerInMemorySemanticdbIndex` was used there and whether it should be used here. Semanticdbs we get here are already built interactively, isn't it enough?",
        "createdAt" : "2018-03-31T15:10:16Z",
        "updatedAt" : "2018-03-31T19:24:47Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : "Alexey Alekhin",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5708b7b0e46d970250e38a25ad44371815b04c29",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@          val scalacDiagnostics: Seq[Diagnostic] =\n            if (scalacDisabled) Nil\n            else document.messages.map(_.toLSP(\"scalac\"))\n\n          val linterTask: Task[Seq[Diagnostic]] ="
  }
]