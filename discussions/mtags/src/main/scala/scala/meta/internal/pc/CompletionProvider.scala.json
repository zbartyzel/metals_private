[
  {
    "id" : "d068556e-2e77-4cda-b2e3-9116b9e5a372",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "d644337e-79b2-4392-a2a3-614354c8ff16",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "If we don't close the comment here, the whole code below the `/**` will be commented out, and we cannot traverse the AST (retrieved from a compilation unit) below the comment ",
        "createdAt" : "2020-01-04T12:24:53Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +31,35 @@            params.text().charAt(i - 2) == '/' =>\n        // Insert potentially missing `*/` to avoid comment out all codes after the \"/**\".\n        CURSOR + \"*/\"\n      case _ =>\n        // Default _CURSOR_ instrumentation."
  },
  {
    "id" : "c774aef8-3d5b-466c-8443-2528a1a4c804",
    "prId" : 1092,
    "comments" : [
      {
        "id" : "c6470f67-5708-475a-9347-07d90acbdb1e",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "The only thing I wasn't 100% sure on is here do we need to also encode this again before we pass it into `matchesSubCharacters` or `matches` since the `entered.toString`?",
        "createdAt" : "2019-11-29T06:03:31Z",
        "updatedAt" : "2019-11-29T06:05:08Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "89e19693-2f1e-4dd8-9a78-87f72ac1b82e",
        "parentId" : "c6470f67-5708-475a-9347-07d90acbdb1e",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Not sure either, but might be good to encode it again. Situations like: `weird_method@Name`",
        "createdAt" : "2019-11-29T10:26:13Z",
        "updatedAt" : "2019-11-29T10:26:13Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2c151fbc-45a3-4ca6-a15c-3741c5647814",
        "parentId" : "c6470f67-5708-475a-9347-07d90acbdb1e",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We always want to fuzzy match against the decoded name, it would be weird to include `::` if the user types `foo.$colon$col@@`",
        "createdAt" : "2019-11-29T11:34:00Z",
        "updatedAt" : "2019-11-29T11:34:08Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a8c3e9fd388b949abe04c1a0fa6eda1c14cfe9ab",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +394,398 @@            val startOfWord =\n              if (lastSpace < lastDot && lastSpace >= 0) lastSpace else lastDot\n            reversedString.slice(0, startOfWord).reverse\n          } else {\n            entered.toString"
  }
]