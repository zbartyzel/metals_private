[
  {
    "id" : "0ec4506f-8b3a-49cf-88fc-4810526b5477",
    "prId" : 736,
    "comments" : [
      {
        "id" : "192adfb0-8c6c-4b48-a352-673eae9bf7dd",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "Can we somehow limit the capacity? Unbounded queues in multi-threaded environment make me uneasy",
        "createdAt" : "2019-05-29T14:51:25Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a79601f6-6167-4ef9-89bd-52b0ae17b39b",
        "parentId" : "192adfb0-8c6c-4b48-a352-673eae9bf7dd",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We construct the queue in the same way as `Executors.newSingleThreadExecutor()`. All submitted jobs are automatically cancelled after a configurable timeout and cancelled runnables exit immediately (they don't even call the submitted function).",
        "createdAt" : "2019-05-31T09:20:12Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +77,81 @@\n  /** Priority queue that runs the most recently submitted task first. */\n  private class LastInFirstOutBlockingQueue\n      extends PriorityBlockingQueue[Runnable](10, new ju.Comparator[Runnable] {\n        def compare(o1: Runnable, o2: Runnable): Int = {"
  },
  {
    "id" : "548206f1-ff13-42a4-8d82-8bbb5733a405",
    "prId" : 736,
    "comments" : [
      {
        "id" : "07756ea7-0663-44a1-bc05-a9e30d7c6782",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "Can we make it `PriorityBlockingQueue[Job]`?",
        "createdAt" : "2019-05-29T14:52:03Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4bef0a91-0059-40ce-9e39-d00054f3307d",
        "parentId" : "07756ea7-0663-44a1-bc05-a9e30d7c6782",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We can but then we would have to move the cast to `asInstanceOf[BlockingQueue[Runnable]]` in the `ThreadPoolExecutor`. I added a comment why these casts are safe.",
        "createdAt" : "2019-05-31T09:37:27Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +78,82 @@  /** Priority queue that runs the most recently submitted task first. */\n  private class LastInFirstOutBlockingQueue\n      extends PriorityBlockingQueue[Runnable](10, new ju.Comparator[Runnable] {\n        def compare(o1: Runnable, o2: Runnable): Int = {\n          // Downcast is safe because we only submit `Job` runnables into this"
  },
  {
    "id" : "da491a5c-bf58-4e80-a650-938c007b34c4",
    "prId" : 736,
    "comments" : [
      {
        "id" : "e60a9a3f-bce4-4b79-904d-9a5fe86572b9",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "can it just be `=> Unit` ? Would avoid having to write additional () => when submitting any job.",
        "createdAt" : "2019-05-30T14:56:02Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "413999ad-5a29-4102-8fc6-aba99722f172",
        "parentId" : "e60a9a3f-bce4-4b79-904d-9a5fe86572b9",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It can be but I don't think it would make the code more readable. As a general rule of thumb I avoid by-name parameters until it's become painful to write the leading `() =>`. In this case, we only call `submit` once.  ",
        "createdAt" : "2019-05-31T09:18:36Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6e424dd2-202a-4dd0-9041-9d6da851ae02",
        "parentId" : "e60a9a3f-bce4-4b79-904d-9a5fe86572b9",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's also a couple times in tests, but it's ok with me.",
        "createdAt" : "2019-05-31T10:06:41Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "43d4e286-6ef9-4503-b16d-efd77afd2b91",
        "parentId" : "e60a9a3f-bce4-4b79-904d-9a5fe86572b9",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I personally think it's more readable with the leading `() =>` at call-sites. It's only for APIs that are used a lot like `Option[T].getOrElse(=>T)` where I think by-name is justified.",
        "createdAt" : "2019-05-31T10:09:29Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@  override def toString(): String = s\"CompilerJobQueue($executor)\"\n  def shutdown(): Unit = executor.shutdown()\n  def submit(fn: () => Unit): Unit = {\n    submit(new CompletableFuture[Unit](), fn)\n  }"
  }
]