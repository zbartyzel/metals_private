[
  {
    "id" : "a1003580-59e7-45b9-8ee5-dcf47d90ad3a",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "4eefd7be-738c-48b4-ab3f-414efed8e20d",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "The followings code comes from `Completions.scala`",
        "createdAt" : "2020-02-03T07:06:25Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@  private val DefaultIndent = 2\n\n  class OverrideDefMember(\n      val label: String,\n      val edit: l.TextEdit,"
  },
  {
    "id" : "48f07a90-8f76-43f5-824a-fec15faa537c",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "f62850a9-c551-47a5-ab96-17ba06f7738e",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Extracted the logic to calculate the list of `OverrideDefMember` so that this method can be used from both\r\n- `case class Override`\r\n- `implementAll()`",
        "createdAt" : "2020-02-03T07:08:29Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@  }\n\n  private def getMembers(\n      typed: Tree,\n      range: l.Range,"
  },
  {
    "id" : "3e4f8177-aef6-49be-898e-e1c8472f6f24",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "6863921a-54e0-4d47-8ee7-c4546bfa247d",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "The following codes are new ones.",
        "createdAt" : "2020-02-03T07:09:09Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 294,
    "diffHunk" : "@@ -1,1 +292,296 @@  private def isVarSetter(sym: Symbol): Boolean =\n    !sym.isStable && !sym.isLazy && sym.isAccessor\n\n  def implementAllAt(pos: Position, text: String): List[l.TextEdit] = {\n"
  },
  {
    "id" : "81da88c0-c097-4752-a718-113899a1191e",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "ef102f8e-c448-4ceb-8790-743f543636a7",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Find the explicit declaration in the class/object so that we can infer the indent from them.\r\n\r\n```scala\r\nobject X {\r\n  trait Foo {\r\n    def foo(x: Int): Int\r\n  }\r\n  class Bar extends Foo {\r\n               val x = 1\r\n  }\r\n}\r\n```\r\n\r\nto \r\n\r\n```scala\r\nobject X {\r\n  // ...\r\n  class Bar extends Foo {\r\n          override def foo(x: Int): Int = ???\r\n          val x = 1\r\n  }\r\n}\r\n```\r\n\r\ninstead of \r\n\r\n```scala\r\nobject X {\r\n  // ...\r\n  class Bar extends Foo {\r\n    override def foo(x: Int): Int = ???\r\n          val x = 1\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\n**Removing primary constructor** by `sym.pos.line != t.pos.line`, because if it remains and infers the indent from that, the result will be\r\n\r\n```scala\r\nobject X {\r\n  // ...\r\n  class Bar(init: Int) extends Foo {\r\n  override def foo(x: Int): Int = ???\r\n          val x = 1\r\n  }\r\n}\r\n```\r\n\r\nI thought it could be filtered out using `!sym.isPrimaryConstructor` but it remains 🤔 ",
        "createdAt" : "2020-02-03T07:26:01Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 398,
    "diffHunk" : "@@ -1,1 +396,400 @@            !sym.isPrimaryConstructor &&\n            sym.pos.line != t.pos.line // filter out explicit primary constructor `class Foo(x: Int) ...`\n        )\n        .headOption\n        .map(existing => {"
  },
  {
    "id" : "fa203e31-f06b-4dbb-966d-a27414df551e",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "e40b9b91-17a2-40d1-93ed-d55168c57c90",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "What about:\r\n```\r\nobject Foo extends Bar {}\r\n```\r\n?",
        "createdAt" : "2020-02-03T15:55:14Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "601987d0-8268-41cc-b5cd-298cfb5802af",
        "parentId" : "e40b9b91-17a2-40d1-93ed-d55168c57c90",
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Oops, I missed that situation, we have to add the following case:\r\n\r\n```scala\r\ncase (m: ModuleDef) :: _ =>\r\n  // ...\r\n```\r\n\r\nto capture object's definition. ",
        "createdAt" : "2020-02-08T06:11:48Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "41d84b46-9577-4b8a-9159-b3f2604a39db",
        "parentId" : "e40b9b91-17a2-40d1-93ed-d55168c57c90",
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "done in https://github.com/scalameta/metals/pull/1379/commits/0bd0092ecb6890e62d2b137b085fed55d4db5473 :)",
        "createdAt" : "2020-02-08T07:56:16Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 318,
    "diffHunk" : "@@ -1,1 +316,320 @@      // class Foo extends Bar {}\n      // ~~~~~~~~~~~~~~~~~~~~~~~~\n      case (c: ClassDef) :: _ =>\n        val t = c.impl\n        implementAllFor(t)"
  },
  {
    "id" : "f14ab98c-2c65-49e0-9cdc-d7428954348f",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "9e153094-1d9a-4f7c-91c0-fda7abebcb7e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "all the cases are nearly identical in their implementation, the only difference is how they extract a tree. Can we maybe extract it to a utility method taking a Tree as input?",
        "createdAt" : "2020-02-09T21:36:49Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "358829c3-ead9-45a4-a496-81cd1c07903e",
        "parentId" : "9e153094-1d9a-4f7c-91c0-fda7abebcb7e",
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "done in https://github.com/scalameta/metals/pull/1379/commits/761a52952d7d9138cba683bbbd1c638723889903\r\nThank you for your advice, it's much clear :)",
        "createdAt" : "2020-02-10T15:40:48Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 324,
    "diffHunk" : "@@ -1,1 +322,326 @@      // object Foo extends Bar {}\n      // ~~~~~~~~~~~~~~~~~~~~~~~~\n      case (m: ModuleDef) :: _ =>\n        val t = m.impl\n        implementAllFor(t)"
  },
  {
    "id" : "14856ded-8a0a-415c-9a82-f139b4a9e4bc",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "c09308eb-f420-4a88-9e2e-5be32855faa7",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "defaultIndent (lowercase D)?",
        "createdAt" : "2020-02-09T21:41:04Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "00075db2-c78c-493b-bfc7-0fddea35f19a",
        "parentId" : "c09308eb-f420-4a88-9e2e-5be32855faa7",
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Personally, I usually use upper camel case for constants https://docs.scala-lang.org/style/naming-conventions.html#constants-values-variable-and-methods, and [metals seem that it also follow this naming convention](https://github.com/scalameta/metals/blob/60e3d151dd80f0def1a122ff54e5c2f9e805e6cb/metals/src/main/scala/scala/meta/internal/metals/ClientExperimentalCapabilities.scala#L12).\r\n\r\nI don't have a strong opinion around a naming convention, but what do you think about this? :)",
        "createdAt" : "2020-02-10T07:01:12Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "55644f13-c0a7-4ca5-bf14-b79736a37a3a",
        "parentId" : "c09308eb-f420-4a88-9e2e-5be32855faa7",
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I don't mind either, let's leave it like this 👍 ",
        "createdAt" : "2020-02-10T15:34:34Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@trait OverrideCompletions { this: MetalsGlobal =>\n\n  private val DefaultIndent = 2\n\n  class OverrideDefMember("
  }
]