[
  {
    "id" : "a817f722-47ad-45f4-a548-fbc30f981afb",
    "prId" : 128,
    "comments" : [
      {
        "id" : "5a76c60a-2cc8-4bd3-a126-93c4b0edcdd1",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I'll report the comment as a review comment, so it's easier to see.\r\nUnder what circumstances is this a `StringCorrelationId`? Should we ignore it?",
        "createdAt" : "2017-12-15T14:46:56Z",
        "updatedAt" : "2017-12-15T21:25:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a5d753fd-4017-4867-a01a-3e73a21d3b21",
        "parentId" : "5a76c60a-2cc8-4bd3-a126-93c4b0edcdd1",
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I've seen https://github.com/scalameta/language-server/pull/128#commitcomment-26300800, that makes sense.",
        "createdAt" : "2017-12-15T14:48:49Z",
        "updatedAt" : "2017-12-15T21:25:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "baa275778ef3f4f47fbd5cf8309f788fb8829473",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +180,184 @@    }.runAsync\n    id match {\n      case NumericCorrelationId(value) =>\n        activeRequestsById.put(value.toIntExact, future)\n      case _ =>"
  },
  {
    "id" : "0839a42e-662a-4433-8730-f8016b49f882",
    "prId" : 103,
    "comments" : [
      {
        "id" : "14366bbf-29d9-4bfe-a98a-83f1f34e1e23",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "How about making this a `trait`? TBH I never understood the `abstract class` vs `trait` thing in Scala, hence I always used traits.",
        "createdAt" : "2017-12-09T13:38:09Z",
        "updatedAt" : "2017-12-09T13:43:06Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "53fcae17-4bc1-405a-b8a3-6362cbea2725",
        "parentId" : "14366bbf-29d9-4bfe-a98a-83f1f34e1e23",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I prefer abstract class unless I expect it to be mixed into another class. abstract classes can accept parameters (traits get that ability too in dotty) and they also make it easier to keep compatibility pre-2.12 (although that's irrelevant here). I think it's best to keep this as a class here, I can make it non-abstract by implementing commandHandler, but it doesn't really matter for us much here.",
        "createdAt" : "2017-12-09T13:47:51Z",
        "updatedAt" : "2017-12-09T13:47:51Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b806662917cd1a44afa64fabbb83717dd0bbefe5",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +28,32 @@ *       and that can't subclass anything other than Any\n */\nabstract class Connection(inStream: InputStream, outStream: OutputStream)(implicit s: Scheduler)\n    extends LazyLogging with Notifications {\n  private val msgReader = new MessageReader(inStream)"
  }
]