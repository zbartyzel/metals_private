[
  {
    "id" : "b6871f5f-c3a7-4c3a-a9b6-0ef892f66528",
    "prId" : 337,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "d01465d4-4800-417e-8a7c-4a18fab97518",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Have you considered the trade-offs wrt `ConcurrentHashMap`? I'm asking because `ConcurrentHashMap` is my go-to for these scenarios since it's generally faster.",
        "createdAt" : "2018-11-24T20:05:01Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "36b2e430-7597-4cd9-a6d1-f180468fb056",
        "parentId" : "d01465d4-4800-417e-8a7c-4a18fab97518",
        "author" : {
          "login" : "olafurpg",
          "name" : "칍lafur P치ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I didn't use `ConcurrentHashMap` since the `computeIfAbsent` instructions say the compute function should be \"short and simple\" and in this class it's expensive. However, worst case it blocks with synchronized either way so can just use `ConcurrentHashMap`. I agree that's better for consistency 游녨 ",
        "createdAt" : "2018-11-25T11:24:05Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "칍lafur P치ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ce08b46e-9813-4f98-a77b-4479b7c41094",
        "parentId" : "d01465d4-4800-417e-8a7c-4a18fab97518",
        "author" : {
          "login" : "olafurpg",
          "name" : "칍lafur P치ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Turns out that `ConcurrentHashMap` results in a deadlock or infinite loop at\r\n\r\n```\r\n\"ForkJoinPool.commonPool-worker-1\" #96 daemon prio=5 os_prio=31 tid=0x00007f9cec46c000 nid=0x7323 runnable [0x0000700008402000]\r\n   java.lang.Thread.State: RUNNABLE\r\n        at java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1069)\r\n        at java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:1006)\r\n        at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$compile$3(InteractiveSemanticdbs.scala:98)\r\n```\r\n\r\nBack to `Collections.synchronizedMap` it is then.",
        "createdAt" : "2018-11-26T10:48:34Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "칍lafur P치ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@  private val textDocumentCache = Collections.synchronizedMap(\n    new java.util.HashMap[AbsolutePath, s.TextDocument]()\n  )\n\n  def reset(): Unit = {"
  },
  {
    "id" : "5f88d551-20d9-41b1-8677-a6a8fa9fe593",
    "prId" : 2345,
    "prUrl" : "https://github.com/scalameta/metals/pull/2345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19d05e1b-c1a0-4206-b99c-4dc60f4b7b66",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I added two fallbacks here - worksheet presentation compiler and the standalone one as a last resort.",
        "createdAt" : "2020-12-29T15:43:05Z",
        "updatedAt" : "2020-12-31T10:33:41Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d9cd2ac8f7fbab36622dcb13d1c272c4f968a361",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +169,173 @@          .flatMap(compilers().loadWorksheetCompiler)\n      }\n      .getOrElse(compilers().ramboCompiler)\n\n    val uri = source.toURI.toString"
  },
  {
    "id" : "212a0b2d-3546-43ce-a69b-f168a6ab83be",
    "prId" : 2412,
    "prUrl" : "https://github.com/scalameta/metals/pull/2412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7a4d284-9b22-4429-8d7b-923bfe0f1947",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's maybe move some of the logic (prepending imports, calculating semanticdb and adjusting ranges) to `Compilers` and we can use `AdjustLspData` the same as with any other cases? We would probably need to add `adjustRange` from here to `AdjustLspData`",
        "createdAt" : "2021-01-20T13:39:05Z",
        "updatedAt" : "2021-01-25T08:49:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2175829b-f844-4a93-967e-44cda5615db6",
        "parentId" : "b7a4d284-9b22-4429-8d7b-923bfe0f1947",
        "author" : {
          "login" : "dos65",
          "name" : "Vadim Chelyshov",
          "avatarUrl" : "https://avatars.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "body" : "In the beginning, I thought to implement it as you suggest.\r\n\r\nHowever, I found that `references` and `rename` are based on `DefinitionProvider.positionOccurence`.\r\nIt internally uses `TokenEditDistance` between buffer and TextDocument. So for sbt files, it means that TextDocument has to be cleaned from sbt-specific imports before it will be passed into `TokenEditDistance`. Otherwise, it's method `toOriginal` fails.\r\nIt might be handled by adding sbt/adjust-specific logic into `DefinitionProvider` but I don't think that it's the right way to go.\r\n\r\nSo, I decided that it would be better just to leave these hacks in `IntercativeSemanticdb` because in this case adjustment is applied on TextDocument, not on LSP positions.",
        "createdAt" : "2021-01-21T18:11:05Z",
        "updatedAt" : "2021-01-25T08:49:45Z",
        "lastEditedBy" : {
          "login" : "dos65",
          "name" : "Vadim Chelyshov",
          "avatarUrl" : "https://avatars.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5b1486a9-f9c7-450d-8241-7b98b2fa771f",
        "parentId" : "b7a4d284-9b22-4429-8d7b-923bfe0f1947",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think that should not be an issue. DefinitionProvider would still use `InteractiveSemanticdb`, so there would be no need to add sbt specific logic anywhere. However, I see now that it's a bigger refactor here, so maybe I can take a look a bit later while taking a look at how we infer build targets (especially for worksheets, which I guess might not work perfectly now) and how we could improve it. ",
        "createdAt" : "2021-01-22T09:58:00Z",
        "updatedAt" : "2021-01-25T08:49:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "65917e67c7a40c22e3e50becfb28cb3aafcad030",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +169,173 @@    val textDocument = s.TextDocument.parseFrom(bytes)\n    if (prependedLinesSize > 0)\n      cleanupAutoImports(textDocument, text, prependedLinesSize)\n    else textDocument\n  }"
  }
]