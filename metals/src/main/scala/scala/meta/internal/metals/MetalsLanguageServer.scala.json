[
  {
    "id" : "01894af7-7e4f-4e7e-acdb-f12c64e8ac68",
    "prId" : 1897,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "bb5bf052-4a27-408b-9704-0fc8420c7530",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe include it in the Doctor?  I feel like it's part of the Doctor's functionality. ",
        "createdAt" : "2020-07-08T14:42:36Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bc16a38c-9492-48d4-86c7-7a7f307597d7",
        "parentId" : "bb5bf052-4a27-408b-9704-0fc8420c7530",
        "author" : {
          "login" : "kpbochenek",
          "name" : "Krzysiek Bochenek",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "I always prefer smaller, single responsibility classes but I have no strong preference here, if you want I can move this logic to Doctor :+1:",
        "createdAt" : "2020-07-09T07:42:53Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : "Krzysiek Bochenek",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4fb6c074-1357-4517-9873-515df4abdf5d",
        "parentId" : "bb5bf052-4a27-408b-9704-0fc8420c7530",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's fine, but at some point we need a proper solution for setting up all the classes better.",
        "createdAt" : "2020-07-09T11:58:31Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +504,508 @@      clientConfig\n    )\n    popupChoiceReset = new PopupChoiceReset(\n      tables,\n      languageClient,"
  },
  {
    "id" : "17e80337-d1e9-4f2a-b375-50d1f047cf07",
    "prId" : 1846,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "255dcbf4-4602-4941-9e12-fefc28072ab5",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Was this an issue before? Would this only be an issue if for example the source was removed and then we were looking at stale information, or when would this actually happen?",
        "createdAt" : "2020-06-19T19:57:13Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "313b0def-07da-4a22-89e9-2929eab41400",
        "parentId" : "255dcbf4-4602-4941-9e12-fefc28072ab5",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This is actually only an issue if ammonite failed to generate the scala files, which also means we should watch the `.ammonite` directory, since they can be created after indexing :thinking: ",
        "createdAt" : "2020-06-19T22:24:34Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8a2147cb-ac57-4aae-9b1a-3578190b518e",
        "parentId" : "255dcbf4-4602-4941-9e12-fefc28072ab5",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Actually, it didn't fail to generate, ammonite just differently generates path if `^` is used, which should not normally be an issue, but we should leave the guard just in case: I will change the tests a bit so that it's more natural path and not `^.backToTheSameDirectory`",
        "createdAt" : "2020-06-20T20:06:42Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10223975ce00488d39a58765d57e434b217aeb21",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1688,1692 @@    try {\n      val sourceToIndex0 = sourceToIndex(source, targetOpt)\n      if (sourceToIndex0.exists) {\n        val reluri = source.toIdeallyRelativeURI(sourceItem)\n        val input = sourceToIndex0.toInput"
  },
  {
    "id" : "cdaa2157-4bd3-44d2-b152-939ef90b9f24",
    "prId" : 1803,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "33250d16-396b-4ef6-9522-f41edc1eff99",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This might also be useful to log anyway just in case. There will be a fix in ammonite to not remove those directories, which will help in the long run.",
        "createdAt" : "2020-06-04T12:22:32Z",
        "updatedAt" : "2020-06-04T12:22:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a821715e949ca87e48cc5b41fe70815789eae405",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1821,1825 @@        // where it can rarely deletes directories while we are trying to watch them\n        case NonFatal(e) =>\n          scribe.warn(\"File watching failed, indexes will not be updated.\", e)\n      }\n    }"
  },
  {
    "id" : "20fafc9c-9c19-4210-9a56-a07544ffb952",
    "prId" : 1784,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "45dd38d3-9895-4834-925a-ea672102dd59",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This is needed so that we are able to be able to figure out what the original source roots were and and find their path relative to workspace root",
        "createdAt" : "2020-05-29T16:32:09Z",
        "updatedAt" : "2020-05-29T17:13:56Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "96739e67fcaac88a3d90e0225eec023b4b4e8293",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1802,1806 @@        source <- item.getSources.asScala\n      } {\n        val sourceItemPath = source.getUri.toAbsolutePath(followSymlink = false)\n        buildTargets.addSourceItem(sourceItemPath, item.getTarget)\n      }"
  },
  {
    "id" : "8d97890c-8e76-4a72-a5fc-26325999db18",
    "prId" : 1758,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "578dd848-77ac-4346-b7df-84a9cf2ba6d9",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe we should filter the ones with incompatible versions and show a warning for those?",
        "createdAt" : "2020-05-18T10:40:39Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7032eaa6-a7d3-4e31-bc21-9deae199bb9b",
        "parentId" : "578dd848-77ac-4346-b7df-84a9cf2ba6d9",
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So one thing I thought about while doing this is in a situation where a user has an sbt and a mill file for example, I think it's important for the choice to take priority. Because let's say they are on an unsupported sbt version, but they want sbt, then it's probably better for them to choose sbt and then get a warning and \"no build tool\" message rather than have sbt filtered out, and mill chosen even if that's not what they want.\r\n\r\nWhat do you think?",
        "createdAt" : "2020-05-18T11:57:29Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "164ccff3-d281-4431-8eda-5750b0553ed6",
        "parentId" : "578dd848-77ac-4346-b7df-84a9cf2ba6d9",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Sure, that's probably better.",
        "createdAt" : "2020-05-18T13:35:51Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "82833ad1c0108993cd84f5b3b8aba65d1107aace",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1462,1466 @@    }\n\n    buildTools.loadSupported match {\n      case Nil => {\n        if (!buildTools.isAutoConnectable) {"
  },
  {
    "id" : "b3c52109-aecb-4e92-9977-7a4834d58dbf",
    "prId" : 1717,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "caaa61bc-bb3c-47ac-b958-629e74fa310b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "So probably the best that we can do currently is add an option to MetalsServerConfig like:\r\n```scala\r\n  allowMultilineStringFormatting = MetalsServerConfig.binaryOption(\r\n      \"metals.allow-multiline-string-formatting\",\r\n      default = true\r\n    ),\r\n```\r\nAnd then:\r\n```scala      \r\n\r\ncapabilities.setDocumentRangeFormattingProvider(initialConfig.allowMultilineStringFormatting)\r\n```",
        "createdAt" : "2020-05-08T17:32:59Z",
        "updatedAt" : "2020-05-12T14:12:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b2e25e3cd0a9f38ceefc59fbff6f94d7e31be601",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +542,546 @@        new DocumentOnTypeFormattingOptions(\"\\n\")\n      )\n      capabilities.setDocumentRangeFormattingProvider(\n        initialConfig.allowMultilineStringFormatting\n      )"
  },
  {
    "id" : "32785c29-4ef5-4e4b-907b-386f8cd6725c",
    "prId" : 1538,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "eb73f2e5-f3b4-409a-a6d7-18b598996762",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe we could have this:\r\n```scala\r\n    val toIndexSource = targetOpt\r\n      .flatMap(ammonite.generatedScalaPath(_, source))\r\n      .getOrElse(source)\r\n```\r\nin a separate function and just use here to get the real source item?",
        "createdAt" : "2020-03-31T17:41:32Z",
        "updatedAt" : "2020-05-21T11:17:43Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0573601e-53a0-438c-9263-c379e3e24d3c",
        "parentId" : "eb73f2e5-f3b4-409a-a6d7-18b598996762",
        "author" : {
          "login" : "alexarchambault",
          "name" : "Alexandre Archambault",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-04-05T22:17:53Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : "Alexandre Archambault",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +1622,1626 @@        buildTargets.linkSourceFile(target, source)\n      }\n      indexSourceFile(source, Some(sourceItem), targets.asScala.headOption)\n    }\n  }"
  },
  {
    "id" : "c1ab1ddc-aac4-4f26-8421-b0a5a373f1ed",
    "prId" : 1538,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "fe4c9bef-61d8-4f09-9298-841c2c0a5bf0",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we reindex only the Ammonite targets when needed? ",
        "createdAt" : "2020-04-09T11:00:44Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c66abe94-71e2-44a8-b987-2fac832d58a6",
        "parentId" : "fe4c9bef-61d8-4f09-9298-841c2c0a5bf0",
        "author" : {
          "login" : "alexarchambault",
          "name" : "Alexandre Archambault",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "I don't know… It seems that would require being able to remove particular build targets from the indices (only the Ammonite ones that changed when (re)importing Ammonite scripts, or only the main build ones when (re)importing the main build), before adding them back with updated parameters. I don't know if that's do-able.",
        "createdAt" : "2020-04-11T14:06:47Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : "Alexandre Archambault",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : 284,
    "diffHunk" : "@@ -1,1 +1766,1770 @@  }\n\n  private var lastImportedBuild = ImportedBuild.empty\n\n  private def indexWorkspace(check: () => Unit): Unit = {"
  },
  {
    "id" : "d1abbfdf-9d61-4457-bc91-64b79538a650",
    "prId" : 1491,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "71b20379-d702-4d8a-bfaf-7f001c74f062",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Will this trigger a warning if I'm running a custom version of Bloop locally? Ideally, it would be good to only trigger this when the user has explicitly configured a bloop version through the settings before (I personally don't change this setting).",
        "createdAt" : "2020-03-12T08:46:51Z",
        "updatedAt" : "2020-03-12T10:12:33Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a90b3239-85aa-4158-93e0-f76475160d0b",
        "parentId" : "71b20379-d702-4d8a-bfaf-7f001c74f062",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed!",
        "createdAt" : "2020-03-12T10:22:06Z",
        "updatedAt" : "2020-03-12T10:22:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbbdead8d9342cae1e125b6d8574ec11521afe81",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +841,845 @@          val expectedBloopVersion = userConfig.currentBloopVersion\n          val correctVersionRunning =\n            buildServer.map(_.version).contains(expectedBloopVersion)\n          val allVersionsDefined = buildServer.nonEmpty && userConfig.bloopVersion.nonEmpty\n          val changedToNoVersion = old.bloopVersion.isDefined && userConfig.bloopVersion.isEmpty"
  },
  {
    "id" : "e76fade6-4fbc-4e8a-b93a-dc74876c86ea",
    "prId" : 1435,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "7df778a9-5cb4-48bd-8e71-b88102f4d021",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Since it's for the test, it's better that we wait.",
        "createdAt" : "2020-02-17T14:53:50Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb025d5358f8296b853bbb7ede33b89e75356b35",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +803,807 @@        val event =\n          new DirectoryChangeEvent(EventType.MODIFY, generatedFile.toNIO, 1)\n        didChangeWatchedFiles(event).get()\n      }\n    }"
  },
  {
    "id" : "82dbece7-ec97-4178-8531-807ac067d40e",
    "prId" : 1435,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "faf78d35-1193-40c5-861d-f08f2474c870",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's now run in a Future in order not to block the event watcher",
        "createdAt" : "2020-02-17T15:47:31Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb025d5358f8296b853bbb7ede33b89e75356b35",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +881,885 @@        onChange(List(path)).asJava\n      } else if (path.isSemanticdb) {\n        Future {\n          event.eventType() match {\n            case EventType.DELETE =>"
  },
  {
    "id" : "c3a03fb2-3a1c-433d-a58f-31e56c401ac6",
    "prId" : 1310,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "2ba374ce-9539-46d4-bdd7-e9c00899dad4",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This will crash with `MatchError` when the user doesn't want to reconnect.",
        "createdAt" : "2020-01-17T19:49:28Z",
        "updatedAt" : "2020-01-19T10:49:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "83ef83a7-2422-42fa-9172-4e1a3821d4e8",
        "parentId" : "2ba374ce-9539-46d4-bdd7-e9c00899dad4",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Thanks, fixed!",
        "createdAt" : "2020-01-18T18:58:40Z",
        "updatedAt" : "2020-01-19T10:49:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e5a0168268324dcfda820d80b1b28f7833499098",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +827,831 @@              .asScala\n              .flatMap {\n                case item if item == Messages.BloopVersionChange.reconnect =>\n                  bloopServers.shutdownServer()\n                  autoConnectToBuildServer().ignoreValue"
  },
  {
    "id" : "42603ce3-98c2-4800-a183-7fd1d3b56f11",
    "prId" : 1286,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "35590a3a-7931-48a7-8f88-287ad0410224",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I got this wrong in #1251. When the client supports code action literals we can send the `CodeActionOptions` version, otherwise we just send `true`",
        "createdAt" : "2020-01-11T17:13:21Z",
        "updatedAt" : "2020-01-11T17:13:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7e6135a896a913f6ec9a1ae82ca098806ffdfea3",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +515,519 @@      } else {\n        capabilities.setCodeActionProvider(true)\n      }\n      capabilities.setTextDocumentSync(TextDocumentSyncKind.Full)\n      capabilities.setExperimental(MetalsExperimental())"
  },
  {
    "id" : "8c1af7a4-4fd6-4941-a5be-7a023b20f711",
    "prId" : 1266,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "6abbb7cb-7b75-4e00-b09d-49f55bab1eaa",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "could you also adapt the remaining methods on the `build` to return the scala `Future` as well?",
        "createdAt" : "2020-01-09T11:22:45Z",
        "updatedAt" : "2020-01-09T19:41:06Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e3a20905-cefd-4140-8fab-25f1a13eab38",
        "parentId" : "6abbb7cb-7b75-4e00-b09d-49f55bab1eaa",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Adapted most except `compile`, since the CompletableFuture.cancel is being used and don't want to rework cancellation right now.",
        "createdAt" : "2020-01-09T19:25:50Z",
        "updatedAt" : "2020-01-09T19:41:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0f92bf439ec2e556ef2dd37eb204d08963b7f24b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1432,1436 @@    val importedBuild = timed(\"imported build\") {\n      for {\n        workspaceBuildTargets <- build.workspaceBuildTargets()\n        ids = workspaceBuildTargets.getTargets.map(_.getId)\n        scalacOptions <- build"
  },
  {
    "id" : "62ff6e5b-4e2c-402d-9518-241da5e246aa",
    "prId" : 1256,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "92401481-1360-43a7-b090-fa823e71184b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: should we move this into a separate file? ",
        "createdAt" : "2020-01-06T16:35:07Z",
        "updatedAt" : "2020-01-06T16:35:39Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "901d06a8-3d9e-4574-bf8a-acb7d081d2ae",
        "parentId" : "92401481-1360-43a7-b090-fa823e71184b",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think we should do it as a larger refactor of the file. I can see a number of similar methods that might be put there. ",
        "createdAt" : "2020-01-06T17:11:17Z",
        "updatedAt" : "2020-01-06T17:11:18Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5221982e1605895d70c5abd22174e1406e1e0efb",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1659,1663 @@  }\n\n  private def checkRunningBloopVersion(bspServerVersion: String) = {\n    if (doctor.isUnsupportedBloopVersion(bspServerVersion)) {\n      val notification = tables.dismissedNotifications.IncompatibleBloop"
  },
  {
    "id" : "ab450fc8-44e2-45e0-8aec-a89bf2fb3208",
    "prId" : 1250,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "8ad3fb7e-f05e-42be-a1bb-fbb6327eb91c",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Enable to fire `textDocument/completion` on type `*`",
        "createdAt" : "2020-01-04T12:23:15Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +495,499 @@        new CompletionOptions(\n          config.compilers.isCompletionItemResolve,\n          List(\".\", \"*\").asJava\n        )\n      )"
  },
  {
    "id" : "29c3ead1-ceb6-47ac-ba04-b7a8d1de29b6",
    "prId" : 1174,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "f49e1102-9b48-4d2b-9b11-6fc94bb24eed",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Clear symbolSearch cache (for dependency sources) on indexing workspace",
        "createdAt" : "2019-12-15T17:54:47Z",
        "updatedAt" : "2019-12-16T12:57:43Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0d5f96fb977b6c73c44b8b5c061480393ecb1c82",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1600,1604 @@      treeView.reset()\n      worksheetProvider.reset()\n      symbolSearch.reset()\n      buildTargets.addWorkspaceBuildTargets(i.workspaceBuildTargets)\n      buildTargets.addScalacOptions(i.scalacOptions)"
  },
  {
    "id" : "2692f12d-9988-42ad-83d3-eaed869fa3ba",
    "prId" : 1145,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "9b702d4d-b29e-45fe-8318-0609bd9fefb5",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "Why do we allow creating incompatible a BuildTool with incompatible version?",
        "createdAt" : "2019-12-05T08:10:37Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "15b3fa1a-61e2-4d67-a453-4141e31e1e36",
        "parentId" : "9b702d4d-b29e-45fe-8318-0609bd9fefb5",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This code is unchanged in this PR, it just moved causing a diff. Please open an issue if you want to follow up on this.",
        "createdAt" : "2019-12-05T10:29:23Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c032fa899f1747d53cf2025b6e1cf03227b19980",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1274,1278 @@    buildTools.loadSupported match {\n      case Some(buildTool) =>\n        val isCompatibleVersion = BuildTool.isCompatibleVersion(\n          buildTool.minimumVersion,\n          buildTool.version"
  },
  {
    "id" : "05806f3b-e442-461f-af34-ae206e019fdf",
    "prId" : 1145,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "f2dddea1-0e25-45d1-95fc-e0f701d2ad68",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "Could you also include the minimal version which is required so the user knows how far it must be upgraded? Also, the recommended version, since it is already known, could be useful to the user.",
        "createdAt" : "2019-12-05T08:11:59Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "592a5dd8-84ed-4507-bba5-a3afb04e3777",
        "parentId" : "f2dddea1-0e25-45d1-95fc-e0f701d2ad68",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This code is unchanged in this PR, it just moved causing a diff. Please open an issue if you want to follow up on this.",
        "createdAt" : "2019-12-05T10:29:32Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c032fa899f1747d53cf2025b6e1cf03227b19980",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1281,1285 @@          Some(buildTool)\n        } else {\n          scribe.warn(s\"Unsupported $buildTool version ${buildTool.version}\")\n          languageClient.showMessage(\n            messages.IncompatibleBuildToolVersion.params(buildTool)"
  },
  {
    "id" : "50baf8fc-ba04-4186-8879-02c43b6bbe83",
    "prId" : 1089,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "5c619d90-6642-4d9f-8930-e7a6f7da0c59",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's go back to Option[WorksheetProvider]",
        "createdAt" : "2019-11-28T15:12:17Z",
        "updatedAt" : "2019-12-06T16:11:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5f027032-54d5-4a13-b7ff-f33c48eb051d",
        "parentId" : "5c619d90-6642-4d9f-8930-e7a6f7da0c59",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : "Aleksei Alefirov",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "why? Previously `Option` made sense, since there would not be a Provider always, and now we have fallback.",
        "createdAt" : "2019-11-29T10:43:52Z",
        "updatedAt" : "2019-12-06T16:11:03Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : "Aleksei Alefirov",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "48fd771b-7ba7-430a-9d6e-0cf59e786e59",
        "parentId" : "5c619d90-6642-4d9f-8930-e7a6f7da0c59",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ok, right. Haven't thought about it!",
        "createdAt" : "2019-11-29T11:09:06Z",
        "updatedAt" : "2019-12-06T16:11:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c2b310420ce80e33b8c8e4977b94f75be9e4f986",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +181,185 @@  var httpServer: Option[MetalsHttpServer] = None\n  var treeView: TreeViewProvider = NoopTreeViewProvider\n  var worksheetProvider: WorksheetProvider = _\n\n  def connectToLanguageClient(client: MetalsLanguageClient): Unit = {"
  },
  {
    "id" : "73c7b025-8bd7-4a15-bef3-a100b7996502",
    "prId" : 935,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "f7dab64d-6e8a-425d-81e0-1f60f052998d",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Would it be possible to get this as part of the digest so that `import build` pops up?",
        "createdAt" : "2019-09-24T11:18:33Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1404230f-728e-4d09-bdb6-36b625a739b3",
        "parentId" : "f7dab64d-6e8a-425d-81e0-1f60f052998d",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can you elaborate? Here we prompt the user to \"import build\" when the `pants-targets` setting changes. I have added a logging statement there for now. Down the road, it would be nice to prompt the user with a text box to provide what targets to run and then automatically update the setting for the user. We don't have the infrastructure to implement that yet, however.",
        "createdAt" : "2019-09-26T15:44:49Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "198b6cc3-44f1-4534-9ee8-9c3127662bf2",
        "parentId" : "f7dab64d-6e8a-425d-81e0-1f60f052998d",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "In PantsDigest we have the UserConfiguration now so we could also digest targets in the settings and we would not need to do anything else. The user would get informed that their pants build changed and that they need to reimport.\r\n\r\nWe wouldn't need to have some special logic in MetalsLanguageServer",
        "createdAt" : "2019-09-27T15:14:13Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d7326b61-6d4d-4a2f-90fd-3b8d0eaef7af",
        "parentId" : "f7dab64d-6e8a-425d-81e0-1f60f052998d",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The reason we need this logic in `MetalsLanguageServer` is to trigger a new digest when the `pants-targets` setting changes. Even if we include the targets in the digest, we don't get a notification to trigger the digest until a BUILD file changes.",
        "createdAt" : "2019-12-03T16:19:35Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a95ae87fd9621161d156685f32480fcb7bb451a4",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +809,813 @@            compilers.restartAll()\n          }\n          if (userConfig.pantsTargets != old.pantsTargets) {\n            slowConnectToBuildServer(forceImport = false).ignoreValue\n          } else {"
  },
  {
    "id" : "4528e81f-3682-4da9-8fe2-de7f7303900c",
    "prId" : 865,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "57dd3545-608f-4e46-98aa-a9abde0f1b85",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "does it work in vscode?  The [specification](https://microsoft.github.io/language-server-protocol/specification#textDocument_onTypeFormatting) expects a `List`, not an `Option[TextEdit]`.",
        "createdAt" : "2019-08-19T08:01:07Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "369805c4-412d-4d8a-a6be-afe438bd7d13",
        "parentId" : "57dd3545-608f-4e46-98aa-a9abde0f1b85",
        "author" : {
          "login" : "Karolina-Bogacka",
          "name" : "Karolina-Bogacka",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/23015369?u=b3677e6a6a4594e396a59e1386936bfbc1b27829&v=4"
        },
        "body" : "it doesn't, and you're right, I haven't noticed. But I've changed my ontypeformatting product to a list and the server still doesn't seem to be responding properly, so it's probably something deeper, too.",
        "createdAt" : "2019-08-19T13:33:32Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "Karolina-Bogacka",
          "name" : "Karolina-Bogacka",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/23015369?u=b3677e6a6a4594e396a59e1386936bfbc1b27829&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +850,854 @@    }\n  /*in order to use onTypeFormatting in vscode, you'll have to set editor.formatOnType = true in settings*/\n  @JsonRequest(\"textDocument/onTypeFormatting\")\n  def onTypeFormatting(\n      params: DocumentOnTypeFormattingParams"
  },
  {
    "id" : "f7c222ad-6de7-4298-93d6-1ee6bfe3737b",
    "prId" : 853,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "9a381e86-d8c4-48c2-8f15-b63955e21736",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "or we could do:\r\n```scala\r\nval semanticDBDoc = semanticdbs.textDocument(source).documentIncludingStale\r\nif(semanticDBDoc.isEmpty){\r\n  warnings.noSemanticdb(source)\r\n} else {\r\n  val occurrence = for { ...} yield occ\r\n  occurrence match {\r\n    case None =>\r\n      // ignore\r\n    case Some(occ) =>\r\n      (...)\r\n  }\r\n}\r\n```\r\nwould probably make the logic simpler (no need to remember about semanticDBDoc being emoty or not when working on occurrences).\r\n\r\nor even something like that:\r\n\r\n```scala\r\n\r\nval semanticDBDoc = semanticdbs.textDocument(source).documentIncludingStale \r\nsemanticDBDoc match {\r\n  case None => warnings.noSemanticdb(source)\r\n  case Some(doc) =>\r\n    val occurrence = definitionProvider.positionOccurrence(source, position, doc).occurrence \r\n    occurrence.foreach { occ =>\r\n        (...)\r\n    }\r\n```",
        "createdAt" : "2019-08-06T06:02:20Z",
        "updatedAt" : "2019-08-06T06:03:27Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "86f01290-2281-4a84-9d67-b9c4f7035ce4",
        "parentId" : "9a381e86-d8c4-48c2-8f15-b63955e21736",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I'd rather not change too much now.",
        "createdAt" : "2019-08-06T08:40:43Z",
        "updatedAt" : "2019-08-06T08:40:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5f941ddc821a1d4f1f99221abb996858261aa0e5",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1586,1590 @@          }\n        case None =>\n          if (semanticDBDoc.isEmpty) {\n            warnings.noSemanticdb(source)\n          }"
  },
  {
    "id" : "39f46b92-2b12-434a-9bbb-4d4c9a81150f",
    "prId" : 775,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "15452eb2-c915-4eb0-b858-ad9584795b4b",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Just moved the implementation into `referencesResult` that returns `ReferencesResult` instead of `CompletableFuture[util.List[Location]]`.",
        "createdAt" : "2019-06-18T10:21:59Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d6160bdb-d688-43b5-9ecf-d6eafaf9f093",
        "parentId" : "15452eb2-c915-4eb0-b858-ad9584795b4b",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good idea",
        "createdAt" : "2019-06-18T12:52:02Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +821,825 @@  ): CompletableFuture[util.List[Location]] =\n    CancelTokens { _ =>\n      referencesResult(params).locations.asJava\n    }\n"
  },
  {
    "id" : "944cb03e-d4ef-4426-b597-d5b42f4f3ff7",
    "prId" : 775,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "05d23992-dbc4-449e-8ab6-5f87531b9490",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "typo\r\n```suggestion\r\n            val referenceContext = new ReferenceContext(false)\r\n```",
        "createdAt" : "2019-06-18T10:25:14Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +1446,1450 @@        case Some(occ) =>\n          if (occ.role.isDefinition) {\n            val referecneContext = new ReferenceContext(false)\n            val refParams = new ReferenceParams(referecneContext)\n            refParams.setTextDocument(position.getTextDocument())"
  },
  {
    "id" : "98bd1050-3777-407d-9f60-28b462b0880b",
    "prId" : 775,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "e2d7ecc0-5e16-4ac2-b445-b3e6255eb33e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```suggestion\r\n            val refParams = new ReferenceParams(referenceContext)\r\n```",
        "createdAt" : "2019-06-18T10:25:29Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +1447,1451 @@          if (occ.role.isDefinition) {\n            val referecneContext = new ReferenceContext(false)\n            val refParams = new ReferenceParams(referecneContext)\n            refParams.setTextDocument(position.getTextDocument())\n            refParams.setPosition(position.getPosition())"
  },
  {
    "id" : "793c01f9-11fc-4b33-8e24-3a8147a732fa",
    "prId" : 775,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "0d949bc7-cf73-4182-ac76-b310e79ab5a8",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Returns `symbol` in addition to the `locations` because `TestingServer` requires symbol information.\r\nWrapping those by `DefinitionResult` for structuring the return value, but what I actually want is something like [`Definitionresult | ReferencesResult`](https://dotty.epfl.ch/docs/reference/new-types/union-types.html) haha.",
        "createdAt" : "2019-06-18T10:30:19Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4fc2e416-69be-4466-a39b-2aa08ad86020",
        "parentId" : "0d949bc7-cf73-4182-ac76-b310e79ab5a8",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`Either[A, B]` should work OK for unions with two types",
        "createdAt" : "2019-06-18T12:55:26Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8051937d-587d-4a31-9f33-ef9d11487600",
        "parentId" : "0d949bc7-cf73-4182-ac76-b310e79ab5a8",
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "That's right! But this time, let me leave the return value's type `Future[DefinitionResult]` because nesting `Either` inside `Future` makes things complicated and feels like to use something like `EitherT` ...",
        "createdAt" : "2019-06-18T16:19:23Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +1464,1468 @@                  semanticdb = None\n                )\n              )\n            }\n          } else {"
  },
  {
    "id" : "6915eee8-f2bf-427e-b3b4-65b52052e3b0",
    "prId" : 775,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "7bcd6607-7e49-4d12-81dc-750ea387da95",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Call `definitionResult` even if it failed to retrieve the symbol information from semanticdb because `DefinitionProvider#definition` [fallback to finding definitions from a presentation compiler](https://github.com/scalameta/metals/blob/50912543e057d958e4a336a6028f74ebca71271e/metals/src/main/scala/scala/meta/internal/metals/DefinitionProvider.scala#L62) if no definition locations found from semanticdb.",
        "createdAt" : "2019-06-18T10:32:53Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1f8b447e-b8d4-4c14-87b1-17c3d3291534",
        "parentId" : "7bcd6607-7e49-4d12-81dc-750ea387da95",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Sounds reasonable :+1:",
        "createdAt" : "2019-06-18T12:55:45Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +1473,1477 @@          // Even if it failed to retrieve the symbol occurrence from semanticdb,\n          // try to find its definitions from presentation compiler.\n          definitionResult(position, token)\n      }\n    } else {"
  },
  {
    "id" : "f64f248c-744f-40b0-a888-646ac5c6f92b",
    "prId" : 729,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "71bdd99f-4810-4167-8dc7-67942001bde3",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We already have tests to see that diagnostics are cleared for deleted files after a `didSave` notification. I manually verified that this works as soon as the file is deleted without a `didSave` notification. However, I don't think we can write a non-flaky test case to stress this situation since file watchers are quite unreliable between operating systems.",
        "createdAt" : "2019-05-24T13:08:22Z",
        "updatedAt" : "2019-05-24T13:08:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d1850b39031efae957be62d433b6c3d1aea8e09",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +672,676 @@    val isScalaOrJava = path.isScalaOrJava\n    if (isScalaOrJava && event.eventType() == EventType.DELETE) {\n      diagnostics.didDelete(path)\n      CompletableFuture.completedFuture(())\n    } else if (isScalaOrJava && !savedFiles.isRecentlyActive(path)) {"
  },
  {
    "id" : "36b64326-2905-47d8-aa61-92d03056fe60",
    "prId" : 709,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "16b9bbe4-7b78-4e16-acf3-adcc41a5e9dd",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`SyntaxErrorSlowSuite` had become flaky until we merged the `parseTrees` and `onChange` futures here",
        "createdAt" : "2019-05-31T13:41:04Z",
        "updatedAt" : "2019-05-31T13:43:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +652,656 @@    buffers.put(path, path.toInput.text)\n    Future\n      .sequence(List(parseTrees(path), onChange(List(path))))\n      .ignoreValue\n      .asJava"
  },
  {
    "id" : "415a1621-18de-4c58-ab40-b5696e5b9c66",
    "prId" : 534,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "3db8b878-ad89-44f6-b2c2-2dfd2ccd6253",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "minor, but you could use a SAM and this becomes:\r\n\r\n```scala\r\nsh.schedule(\r\n  () => tables.jarSymbols.deleteNotUsedTopLevels(usedJars.toArray),\r\n  2,\r\n  TimeUnit.SECONDS\r\n)\r\n```",
        "createdAt" : "2019-02-24T16:35:57Z",
        "updatedAt" : "2019-02-24T16:35:58Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "756c6070-d5fa-4dfb-aace-922d9beccfe3",
        "parentId" : "3db8b878-ad89-44f6-b2c2-2dfd2ccd6253",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Some overloads on `ExecutorService` don't work with SAM, I can't remember which exact one. I don't mind `new Runnable { ... }`",
        "createdAt" : "2019-02-24T16:38:36Z",
        "updatedAt" : "2019-02-24T16:38:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "68a865709d6bc7d432ff4ffaa2fe1eac07d7409a",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +1220,1224 @@      },\n      2,\n      TimeUnit.SECONDS\n    )\n  }"
  },
  {
    "id" : "aa9167e8-db57-4399-acb1-0b9961e4ce86",
    "prId" : 469,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "a726a143-365f-4a6d-adfb-4fec508eaff7",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This case can be collapsed with the previous one",
        "createdAt" : "2019-01-13T22:06:15Z",
        "updatedAt" : "2019-01-14T10:14:10Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2bfe3bb6-8480-4789-9392-0ad9f4147ab9",
        "parentId" : "a726a143-365f-4a6d-adfb-4fec508eaff7",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Huh, on my computer the code is different 🤔 \r\n```scala\r\n          case EventType.OVERFLOW =>\r\n            referencesProvider.onOverflow(event.path())\r\n```\r\n\r\nStill no diff, gonna push again.",
        "createdAt" : "2019-01-14T10:21:52Z",
        "updatedAt" : "2019-01-14T10:21:52Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e7b160b0-9504-4bae-afe8-27596cbbf493",
        "parentId" : "a726a143-365f-4a6d-adfb-4fec508eaff7",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "GitHub updated the diff now, it's a different case that we handle specially.",
        "createdAt" : "2019-01-14T10:22:40Z",
        "updatedAt" : "2019-01-14T10:22:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2f3b70a1cd802829c6ddea08ce8fb12a2d374db9",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +518,522 @@          case EventType.CREATE | EventType.MODIFY =>\n            referencesProvider.onChange(event.path())\n          case EventType.OVERFLOW =>\n            referencesProvider.onOverflow(event.path())\n        }"
  },
  {
    "id" : "f11c3487-b9f0-42f0-b11f-7bf0ea660ddc",
    "prId" : 360,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "0356b946-1e5a-42cc-ab48-78c26ea6a73c",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Is this call idepmpotent? Calling shutdown then exit will go through shutdown twice.",
        "createdAt" : "2018-11-30T09:38:26Z",
        "updatedAt" : "2018-11-30T09:46:56Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e04a975f-8e48-4b4d-9a73-bd5ac93c2e79",
        "parentId" : "0356b946-1e5a-42cc-ab48-78c26ea6a73c",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Yes it is, added a comment to explain why.",
        "createdAt" : "2018-11-30T09:51:22Z",
        "updatedAt" : "2018-11-30T09:51:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c441cb0027d2d58f8b05e52df0b3d74440bfd5b2",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +348,352 @@  def exit(): Unit = {\n    // `shutdown` is idempotent, we can trigger it as often as we like.\n    shutdown()\n    // Ensure that `shutdown` has completed before killing the process.\n    // Some clients may send `exit` immediately after `shutdown` causing"
  },
  {
    "id" : "0b88342f-6d1c-4132-8ea6-4b2f798f00a8",
    "prId" : 337,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "1e778ee9-3d63-4401-9b73-6c1fab3cf780",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "if you want you can use a SAM:\r\n\r\n```scala\r\nsh.schedule(() => initialized(new InitializedParams), 1, TimeUnit.SECONDS)\r\n```",
        "createdAt" : "2018-11-24T13:14:14Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c53b3990-d334-4c36-a402-39852b72ec2a",
        "parentId" : "1e778ee9-3d63-4401-9b73-6c1fab3cf780",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Updated. SAM sure is prettier, and for dealing with Java collections they're almost a necessity (I can never get the covariant/contravarian bounds right for `java.util.function.Function`). ",
        "createdAt" : "2018-11-25T11:32:26Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ac60cec5-2624-4645-b56d-865fd8df7ce3",
        "parentId" : "1e778ee9-3d63-4401-9b73-6c1fab3cf780",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Sure would be nice to have  a Scalafix rewrite to fix these automatically.\r\n\r\nAs for 2.11 support, I would rather explore classloading 2.11 presentation compiler from a 2.12 server instead of compiling the server to 2.11.",
        "createdAt" : "2018-11-25T11:33:38Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +176,180 @@      capabilities.setTextDocumentSync(TextDocumentSyncKind.Full)\n      if (config.isNoInitialized) {\n        sh.schedule(\n          () => initialized(new InitializedParams),\n          1,"
  },
  {
    "id" : "d447c66a-80b2-4f09-a541-9ceef97e5e74",
    "prId" : 337,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "9673c822-3b63-441c-b709-b1c76cdb0dd4",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "is everything internal?",
        "createdAt" : "2018-11-24T13:28:47Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9dbd1c91-7f03-4a45-9ac1-8ed532762a89",
        "parentId" : "9673c822-3b63-441c-b709-b1c76cdb0dd4",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Yes, only `scala.meta.metals.Main` is public.",
        "createdAt" : "2018-11-25T11:29:03Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@package scala.meta.internal.metals\n\nimport ch.epfl.scala.bsp4j.BuildTargetIdentifier"
  },
  {
    "id" : "aa3d59c7-a6a4-4714-9119-cda8c174ef99",
    "prId" : 337,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "bc5fda49-08a0-4ebc-bbae-90c7dac690ec",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "what's this call for?",
        "createdAt" : "2018-11-24T13:49:38Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4a4dfe14-790f-49d1-8afe-af0b7d5481a1",
        "parentId" : "bc5fda49-08a0-4ebc-bbae-90c7dac690ec",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Added comment\r\n```scala\r\n      // Record what build target this dependency source (if any) was jumped from,\r\n      // needed to know what classpath to compile the dependency source with.\r\n```",
        "createdAt" : "2018-11-25T11:38:55Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : 737,
    "diffHunk" : "@@ -1,1 +735,739 @@      // Record what build target this dependency source (if any) was jumped from,\n      // needed to know what classpath to compile the dependency source with.\n      interactiveSemanticdbs.didDefinition(source, result)\n      result\n    } else {"
  },
  {
    "id" : "5335bd06-f7bd-4b24-98aa-c9b4c383de0f",
    "prId" : 2154,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "379e98ec-9a66-4b85-9c7d-537479435197",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we move the logic to a separate method?",
        "createdAt" : "2020-10-28T17:35:18Z",
        "updatedAt" : "2020-10-30T17:54:40Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "447135fe-9772-4da9-953a-dca0ff44bf4b",
        "parentId" : "379e98ec-9a66-4b85-9c7d-537479435197",
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Yea for sure, I moved this out now.",
        "createdAt" : "2020-10-29T13:44:27Z",
        "updatedAt" : "2020-10-30T17:54:40Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8eab66607688c713397334de6750fab0ca346fc8",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +1409,1413 @@        }.asJavaObject\n      case ServerCommands.RestartBuildServer() =>\n        bspSession.foreach { session =>\n          if (session.main.isBloop) bloopServers.shutdownServer()\n        }"
  },
  {
    "id" : "be69ca45-ee9c-408e-a0cc-cd86595552a2",
    "prId" : 2391,
    "prUrl" : "https://github.com/scalameta/metals/pull/2391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86948f23-5a31-4968-9479-837f0e8a1121",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "This pr looks huge because of the shift, but really this is the only difference. If there is no root, we just show the message, and then don't replace the providers. ",
        "createdAt" : "2021-01-15T10:48:33Z",
        "updatedAt" : "2021-01-15T10:48:33Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6787025b-cb95-4efb-a33c-29a6ece78ba2",
        "parentId" : "86948f23-5a31-4968-9479-837f0e8a1121",
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/691940?u=cc41b494c40cff0015df21d897639d7d176bb9c6&v=4"
        },
        "body" : "![image](https://user-images.githubusercontent.com/691940/104718269-e9577d00-572a-11eb-95a6-f7de81aece6e.png)\r\n\r\nThis helps a lot with the review",
        "createdAt" : "2021-01-15T11:12:29Z",
        "updatedAt" : "2021-01-15T11:12:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/691940?u=cc41b494c40cff0015df21d897639d7d176bb9c6&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ca0bbb58-106b-4c03-9c4e-7f3b7865581c",
        "parentId" : "86948f23-5a31-4968-9479-837f0e8a1121",
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "ahhhh TIL! I've never used this before!",
        "createdAt" : "2021-01-15T11:14:21Z",
        "updatedAt" : "2021-01-15T11:14:21Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "128d18c143146159f289e0402ad515753e17f3d5",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +284,288 @@    root match {\n      case None =>\n        languageClient.showMessage(Messages.noRoot)\n      case Some(path) =>\n        workspace = AbsolutePath(Paths.get(URI.create(path))).dealias"
  },
  {
    "id" : "3ee3ee92-63e2-4580-822c-2d131409ae54",
    "prId" : 2402,
    "prUrl" : "https://github.com/scalameta/metals/pull/2402",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ad8909b-2222-4db6-9010-e6de7304b2aa",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/691940?u=cc41b494c40cff0015df21d897639d7d176bb9c6&v=4"
        },
        "body" : "do all clients set this? This is potentially breaking for clients that used to rely on the flag and are not yet sending this info via LSP",
        "createdAt" : "2021-01-18T13:13:40Z",
        "updatedAt" : "2021-01-18T13:13:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/691940?u=cc41b494c40cff0015df21d897639d7d176bb9c6&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "be3b0428-6e9f-4fcf-85df-df7ab6152e57",
        "parentId" : "9ad8909b-2222-4db6-9010-e6de7304b2aa",
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/691940?u=cc41b494c40cff0015df21d897639d7d176bb9c6&v=4"
        },
        "body" : "Sorry, just saw the comment in the PR description. It's cool then!\r\n\r\nDo we still need `metalsClientType` in the config or can we remove it?",
        "createdAt" : "2021-01-18T13:14:27Z",
        "updatedAt" : "2021-01-18T13:14:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/691940?u=cc41b494c40cff0015df21d897639d7d176bb9c6&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a43ba9e8-c9b9-4032-8731-f44ef8161d72",
        "parentId" : "9ad8909b-2222-4db6-9010-e6de7304b2aa",
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/691940?u=cc41b494c40cff0015df21d897639d7d176bb9c6&v=4"
        },
        "body" : "At a quick glance, it seems like this is the only spot where we used `metalsClientType` directly. Other than that it's used to initialize the default config in https://github.com/scalameta/metals/blob/a004fd0a7c0153415243f735a54070abe178924e/metals/src/main/scala/scala/meta/internal/metals/MetalsServerConfig.scala#L134 so it would be better to align the source of truth and use LSP for that too, wdyt?",
        "createdAt" : "2021-01-18T13:17:28Z",
        "updatedAt" : "2021-01-18T13:17:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/691940?u=cc41b494c40cff0015df21d897639d7d176bb9c6&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cbfec217-7d14-4eb6-be1a-9f974f6dfb36",
        "parentId" : "9ad8909b-2222-4db6-9010-e6de7304b2aa",
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "As far as I can tell, yes. A few examples of the lesser popular clients\r\n- [emacs-lsp](https://github.com/emacs-lsp/lsp-mode/blob/a0c41e489c656bc69a3cdd0d04ee549f45e42a59/lsp-mode.el#L6656)\r\n- [Neovim](https://github.com/neovim/neovim/commit/1a4d380b5abfff2cf5e46a1b00e98f4381b7e5b0)\r\n\r\nAnd of course the big dogs like VS Code for sure set this.\r\n\r\n> potentially breaking \r\n\r\nAlso, this is only being used to show the client in the logs, everything else regarind the `-Dmetals.client` stuff is still the same and will still work as expected, it just won't show the client name in the logs.\r\n\r\nThe one that I did find that doesn't set this is `vim-lsc`. However, I'll send in a pr to fix this for them  since this has been part of the spec for a while now.",
        "createdAt" : "2021-01-18T13:18:56Z",
        "updatedAt" : "2021-01-18T13:18:56Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a1c5f0d5-e09b-4098-b829-dd120d2f153f",
        "parentId" : "9ad8909b-2222-4db6-9010-e6de7304b2aa",
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "https://github.com/natebosch/vim-lsc/pull/373",
        "createdAt" : "2021-01-18T13:25:04Z",
        "updatedAt" : "2021-01-18T13:25:04Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "78058098-da2e-4721-b182-3eb3d57784a3",
        "parentId" : "9ad8909b-2222-4db6-9010-e6de7304b2aa",
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : ">  so it would be better to align the source of truth and use LSP for that too, wdyt?\r\n\r\nSorry I was answering your other questions, and totally missed this one. I think in theory, yea, it'd be awesome to just fully get away from the `MetalsServerConfig` altogether, but I'm honest just not sure when. We could do a check on `clientInfo.name` and try to somewhat match on that, but that also may be a bit eh. I'm sort of in the mindset for now to still just leave this in here for a bit since it's not really harming anything. Especially since all the values are looked at last in here: https://github.com/scalameta/metals/blob/main/metals/src/main/scala/scala/meta/internal/metals/ClientConfiguration.scala",
        "createdAt" : "2021-01-18T13:36:18Z",
        "updatedAt" : "2021-01-18T13:36:18Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "beda22ff572487e3bb0d5c8b0b6a60df46f9e2f1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +289,293 @@        MetalsLogger.setupLspLogger(workspace, redirectSystemOut)\n\n        val clientInfo = Option(params.getClientInfo()) match {\n          case Some(info) =>\n            s\"for client ${info.getName()} ${Option(info.getVersion).getOrElse(\"\")}\""
  }
]