[
  {
    "id" : "2fee2b8e-2675-4608-9b22-630db6e188f4",
    "prId" : 1523,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "5ce3fdf8-4353-4ee4-afad-5f189689e555",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ignorant question. This is just because Scala3 produces semanticdb, and therefore are checking for this rather than the plugin right?",
        "createdAt" : "2020-04-04T08:48:59Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : "Chris Kipp",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9480b2d7-6fe8-4389-8c83-6ec96cbbbb98",
        "parentId" : "5ce3fdf8-4353-4ee4-afad-5f189689e555",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Yes, we don't need to check for the plugin, since we don't need one.",
        "createdAt" : "2020-04-04T09:55:10Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +483,487 @@    def isSemanticdbEnabled(scalaVersion: String): Boolean = {\n      if (ScalaVersions.isScala3Version(scalaVersion)) {\n        item.getOptions.asScala.exists { opt => opt == \"-Ysemanticdb\" }\n      } else {\n        item.getOptions.asScala.exists { opt =>"
  },
  {
    "id" : "4f821716-995f-47bf-b45f-345d440064e4",
    "prId" : 1155,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "cd830df8-3ce2-4e0a-b8fe-0bb83892ca1c",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "So there is still a risk we will have a non-atomic operation? Shouldn't we retry the atomic move again or resign altogether.",
        "createdAt" : "2019-12-05T20:41:02Z",
        "updatedAt" : "2019-12-05T20:41:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9ff6434b-69e1-4400-b68c-15f099c89bad",
        "parentId" : "cd830df8-3ce2-4e0a-b8fe-0bb83892ca1c",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Some file systems donâ€™t support atomic moves so the best we can do is fall back to a normal move. ",
        "createdAt" : "2019-12-05T20:59:11Z",
        "updatedAt" : "2019-12-05T20:59:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "12a8ab31-476e-4819-936c-801824a5050e",
        "parentId" : "cd830df8-3ce2-4e0a-b8fe-0bb83892ca1c",
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Could there be a more specific exception to catch here?",
        "createdAt" : "2019-12-05T21:00:23Z",
        "updatedAt" : "2019-12-05T21:00:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "585f966b-6ef8-49bb-87d2-92452973df5f",
        "parentId" : "cd830df8-3ce2-4e0a-b8fe-0bb83892ca1c",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The docs don't specify what exception will be thrown so I didn't want to be too specific. ",
        "createdAt" : "2019-12-06T13:36:25Z",
        "updatedAt" : "2019-12-06T13:36:26Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b68fb8c5f762e67fc61452fc9363fd1cebf0ac19",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +365,369 @@      } catch {\n        case NonFatal(_) =>\n          Files.move(tmp, path.toNIO, StandardCopyOption.REPLACE_EXISTING)\n      }\n    }"
  },
  {
    "id" : "a547a5a2-a466-4cbe-932e-ef5f86fd219c",
    "prId" : 1057,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "1da3d468-a887-4f99-8e97-450740137360",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "ðŸ™ˆ ",
        "createdAt" : "2019-11-11T04:03:20Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "aaade7ed-3f0c-435b-8124-4e6584f41fe5",
        "parentId" : "1da3d468-a887-4f99-8e97-450740137360",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Wish this was easier to write...",
        "createdAt" : "2019-11-11T04:03:29Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d310e08d-a9a8-4e58-9439-553d85905e62",
        "parentId" : "1da3d468-a887-4f99-8e97-450740137360",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```scala\r\ntry initializeParams.getCapabilities.getTextDocument.getCompletion.getCompletionItem.getSnippetSupport.booleanValue\r\ncatch { case _: NPE => false }\r\n```\r\n ðŸ˜… ",
        "createdAt" : "2019-11-11T04:04:34Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f74c4042-f627-41db-bcc0-958cab11e03a",
        "parentId" : "1da3d468-a887-4f99-8e97-450740137360",
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "poor man's monad :P ",
        "createdAt" : "2019-11-11T14:20:14Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "03c3f686dd1789f90cd4b4dd18b979160753abb7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +510,514 @@      } yield hierarchicalDocumentSymbolSupport.booleanValue).getOrElse(false)\n\n    def supportsCompletionSnippets: Boolean =\n      (for {\n        params <- initializeParams"
  },
  {
    "id" : "b072e2d2-cd71-4882-ab33-bf6ee23378fb",
    "prId" : 1048,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "38d78635-dac2-4b78-bd12-c0375a2cf650",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`path.startsWith(workspace)` should strictly speaking be a condition as well",
        "createdAt" : "2019-11-11T13:50:07Z",
        "updatedAt" : "2019-11-11T16:33:17Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9c7a3e99-c8bf-4244-8081-73e6efe5a0db",
        "parentId" : "38d78635-dac2-4b78-bd12-c0375a2cf650",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Added! ",
        "createdAt" : "2019-11-11T16:33:44Z",
        "updatedAt" : "2019-11-11T16:33:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "32617da1c138d4dd74af7289c14ff3aeb1bc9654",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +254,258 @@        isInReadonlyDirectory(workspace)\n\n    def isWorkspaceSource(workspace: AbsolutePath): Boolean =\n      isLocalFileSystem(workspace) &&\n        !isInReadonlyDirectory(workspace) &&"
  },
  {
    "id" : "c15b5f7c-a874-4bf5-ab08-4d757ba69a4a",
    "prId" : 632,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "496e886a-217a-4d63-8e4f-56c768561d8f",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "\\o/",
        "createdAt" : "2019-04-10T08:53:10Z",
        "updatedAt" : "2019-04-10T09:48:55Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ã“lafur PÃ¡ll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "79793f51fa23f5e83e6e9dc8e633ae708eeb17a1",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +502,506 @@  }\n\n  implicit class XtensionTreeTokenStream(tree: Tree) {\n    def leadingTokens: Iterator[Token] = tree.origin match {\n      case Origin.Parsed(input, _, pos) =>"
  },
  {
    "id" : "3e1cf107-99bd-45b0-850b-201d1a77c130",
    "prId" : 2374,
    "prUrl" : "https://github.com/scalameta/metals/pull/2374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bddcfa7-759f-44b5-a8e9-cbecdb8b3f60",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "[note] Previously, the tokenizer always use `Trees.defaultDialect`, now it uses an appropriate dialect for the input.",
        "createdAt" : "2021-01-20T16:17:07Z",
        "updatedAt" : "2021-01-22T16:41:19Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : "Rikito Taniguchi",
          "avatarUrl" : "https://avatars.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e3bdee6d5b72cf6cfee580941ef1b1c2987b172b",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +702,706 @@      tree.origin match {\n        case Origin.Parsed(input, dialect, pos) =>\n          val tokens = dialect(input).tokenize.get\n          tokens.slice(0, pos.start - 1).reverseIterator\n        case _ => Iterator.empty"
  }
]